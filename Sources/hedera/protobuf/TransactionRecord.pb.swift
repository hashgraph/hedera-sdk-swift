// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TransactionRecord.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Response when the client sends the node TransactionGetRecordResponse 
public struct Proto_TransactionRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The status (reach consensus, or failed, or is unknown) and the ID of any new account/file/instance created.
  public var receipt: Proto_TransactionReceipt {
    get {return _storage._receipt ?? Proto_TransactionReceipt()}
    set {_uniqueStorage()._receipt = newValue}
  }
  /// Returns true if `receipt` has been explicitly set.
  public var hasReceipt: Bool {return _storage._receipt != nil}
  /// Clears the value of `receipt`. Subsequent reads from it will return its default value.
  public mutating func clearReceipt() {_uniqueStorage()._receipt = nil}

  /// The hash of the Transaction that executed (not the hash of any Transaction that failed for having a duplicate TransactionID)
  public var transactionHash: Data {
    get {return _storage._transactionHash}
    set {_uniqueStorage()._transactionHash = newValue}
  }

  /// The consensus timestamp (or null if didn't reach consensus yet)
  public var consensusTimestamp: Proto_Timestamp {
    get {return _storage._consensusTimestamp ?? Proto_Timestamp()}
    set {_uniqueStorage()._consensusTimestamp = newValue}
  }
  /// Returns true if `consensusTimestamp` has been explicitly set.
  public var hasConsensusTimestamp: Bool {return _storage._consensusTimestamp != nil}
  /// Clears the value of `consensusTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearConsensusTimestamp() {_uniqueStorage()._consensusTimestamp = nil}

  /// The ID of the transaction this record represents
  public var transactionID: Proto_TransactionID {
    get {return _storage._transactionID ?? Proto_TransactionID()}
    set {_uniqueStorage()._transactionID = newValue}
  }
  /// Returns true if `transactionID` has been explicitly set.
  public var hasTransactionID: Bool {return _storage._transactionID != nil}
  /// Clears the value of `transactionID`. Subsequent reads from it will return its default value.
  public mutating func clearTransactionID() {_uniqueStorage()._transactionID = nil}

  /// The memo that was submitted as part of the transaction (max 100 bytes)
  public var memo: String {
    get {return _storage._memo}
    set {_uniqueStorage()._memo = newValue}
  }

  /// The actual transaction fee charged, not the original transactionFee value from TransactionBody
  public var transactionFee: UInt64 {
    get {return _storage._transactionFee}
    set {_uniqueStorage()._transactionFee = newValue}
  }

  public var body: OneOf_Body? {
    get {return _storage._body}
    set {_uniqueStorage()._body = newValue}
  }

  /// Record of the value returned by the smart contract function (if it completed and didn't fail) from ContractCallTransaction
  public var contractCallResult: Proto_ContractFunctionResult {
    get {
      if case .contractCallResult(let v)? = _storage._body {return v}
      return Proto_ContractFunctionResult()
    }
    set {_uniqueStorage()._body = .contractCallResult(newValue)}
  }

  /// Record of the value returned by the smart contract constructor (if it completed and didn't fail) from ContractCreateTransaction
  public var contractCreateResult: Proto_ContractFunctionResult {
    get {
      if case .contractCreateResult(let v)? = _storage._body {return v}
      return Proto_ContractFunctionResult()
    }
    set {_uniqueStorage()._body = .contractCreateResult(newValue)}
  }

  /// All hbar transfers as a result of this transaction, such as fees, or transfers performed by the transaction, or by a smart contract it calls, or by the creation of threshold records that it triggers.
  public var transferList: Proto_TransferList {
    get {return _storage._transferList ?? Proto_TransferList()}
    set {_uniqueStorage()._transferList = newValue}
  }
  /// Returns true if `transferList` has been explicitly set.
  public var hasTransferList: Bool {return _storage._transferList != nil}
  /// Clears the value of `transferList`. Subsequent reads from it will return its default value.
  public mutating func clearTransferList() {_uniqueStorage()._transferList = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Body: Equatable {
    /// Record of the value returned by the smart contract function (if it completed and didn't fail) from ContractCallTransaction
    case contractCallResult(Proto_ContractFunctionResult)
    /// Record of the value returned by the smart contract constructor (if it completed and didn't fail) from ContractCreateTransaction
    case contractCreateResult(Proto_ContractFunctionResult)

  #if !swift(>=4.1)
    public static func ==(lhs: Proto_TransactionRecord.OneOf_Body, rhs: Proto_TransactionRecord.OneOf_Body) -> Bool {
      switch (lhs, rhs) {
      case (.contractCallResult(let l), .contractCallResult(let r)): return l == r
      case (.contractCreateResult(let l), .contractCreateResult(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TransactionRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "receipt"),
    2: .same(proto: "transactionHash"),
    3: .same(proto: "consensusTimestamp"),
    4: .same(proto: "transactionID"),
    5: .same(proto: "memo"),
    6: .same(proto: "transactionFee"),
    7: .same(proto: "contractCallResult"),
    8: .same(proto: "contractCreateResult"),
    10: .same(proto: "transferList"),
  ]

  fileprivate class _StorageClass {
    var _receipt: Proto_TransactionReceipt? = nil
    var _transactionHash: Data = SwiftProtobuf.Internal.emptyData
    var _consensusTimestamp: Proto_Timestamp? = nil
    var _transactionID: Proto_TransactionID? = nil
    var _memo: String = String()
    var _transactionFee: UInt64 = 0
    var _body: Proto_TransactionRecord.OneOf_Body?
    var _transferList: Proto_TransferList? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _receipt = source._receipt
      _transactionHash = source._transactionHash
      _consensusTimestamp = source._consensusTimestamp
      _transactionID = source._transactionID
      _memo = source._memo
      _transactionFee = source._transactionFee
      _body = source._body
      _transferList = source._transferList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._receipt)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._transactionHash)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._consensusTimestamp)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._transactionID)
        case 5: try decoder.decodeSingularStringField(value: &_storage._memo)
        case 6: try decoder.decodeSingularUInt64Field(value: &_storage._transactionFee)
        case 7:
          var v: Proto_ContractFunctionResult?
          if let current = _storage._body {
            try decoder.handleConflictingOneOf()
            if case .contractCallResult(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._body = .contractCallResult(v)}
        case 8:
          var v: Proto_ContractFunctionResult?
          if let current = _storage._body {
            try decoder.handleConflictingOneOf()
            if case .contractCreateResult(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._body = .contractCreateResult(v)}
        case 10: try decoder.decodeSingularMessageField(value: &_storage._transferList)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._receipt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._transactionHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._transactionHash, fieldNumber: 2)
      }
      if let v = _storage._consensusTimestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._transactionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._memo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memo, fieldNumber: 5)
      }
      if _storage._transactionFee != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._transactionFee, fieldNumber: 6)
      }
      switch _storage._body {
      case .contractCallResult(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .contractCreateResult(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case nil: break
      }
      if let v = _storage._transferList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TransactionRecord, rhs: Proto_TransactionRecord) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._receipt != rhs_storage._receipt {return false}
        if _storage._transactionHash != rhs_storage._transactionHash {return false}
        if _storage._consensusTimestamp != rhs_storage._consensusTimestamp {return false}
        if _storage._transactionID != rhs_storage._transactionID {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._transactionFee != rhs_storage._transactionFee {return false}
        if _storage._body != rhs_storage._body {return false}
        if _storage._transferList != rhs_storage._transferList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
