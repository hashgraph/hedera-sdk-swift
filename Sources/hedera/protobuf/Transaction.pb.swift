// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Transaction.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A single signed transaction, including all its signatures. The SignatureList will have a Signature for each Key in the transaction, either explicit or implicit, in the order that they appear in the transaction. For example, a CryptoTransfer will first have a Signature corresponding to the Key for the paying account, followed by a Signature corresponding to the Key for each account that is sending or receiving cryptocurrency in the transfer. Each Transaction should not have more than 50 levels. 
///
/// The SignatureList field is deprecated and succeeded by SignatureMap.
public struct Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var bodyData: OneOf_BodyData? {
    get {return _storage._bodyData}
    set {_uniqueStorage()._bodyData = newValue}
  }

  /// the body of the transaction, which needs to be signed
  public var body: Proto_TransactionBody {
    get {
      if case .body(let v)? = _storage._bodyData {return v}
      return Proto_TransactionBody()
    }
    set {_uniqueStorage()._bodyData = .body(newValue)}
  }

  /// TransactionBody serialized into bytes , which needs to be signed
  public var bodyBytes: Data {
    get {
      if case .bodyBytes(let v)? = _storage._bodyData {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._bodyData = .bodyBytes(newValue)}
  }

  /// The signatures on the body, to authorize the transaction; deprecated and to be succeeded by SignatureMap field
  public var sigs: Proto_SignatureList {
    get {return _storage._sigs ?? Proto_SignatureList()}
    set {_uniqueStorage()._sigs = newValue}
  }
  /// Returns true if `sigs` has been explicitly set.
  public var hasSigs: Bool {return _storage._sigs != nil}
  /// Clears the value of `sigs`. Subsequent reads from it will return its default value.
  public mutating func clearSigs() {_uniqueStorage()._sigs = nil}

  /// The signatures on the body with the new format, to authorize the transaction
  public var sigMap: Proto_SignatureMap {
    get {return _storage._sigMap ?? Proto_SignatureMap()}
    set {_uniqueStorage()._sigMap = newValue}
  }
  /// Returns true if `sigMap` has been explicitly set.
  public var hasSigMap: Bool {return _storage._sigMap != nil}
  /// Clears the value of `sigMap`. Subsequent reads from it will return its default value.
  public mutating func clearSigMap() {_uniqueStorage()._sigMap = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_BodyData: Equatable {
    /// the body of the transaction, which needs to be signed
    case body(Proto_TransactionBody)
    /// TransactionBody serialized into bytes , which needs to be signed
    case bodyBytes(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Proto_Transaction.OneOf_BodyData, rhs: Proto_Transaction.OneOf_BodyData) -> Bool {
      switch (lhs, rhs) {
      case (.body(let l), .body(let r)): return l == r
      case (.bodyBytes(let l), .bodyBytes(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "body"),
    4: .same(proto: "bodyBytes"),
    2: .same(proto: "sigs"),
    3: .same(proto: "sigMap"),
  ]

  fileprivate class _StorageClass {
    var _bodyData: Proto_Transaction.OneOf_BodyData?
    var _sigs: Proto_SignatureList? = nil
    var _sigMap: Proto_SignatureMap? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bodyData = source._bodyData
      _sigs = source._sigs
      _sigMap = source._sigMap
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Proto_TransactionBody?
          if let current = _storage._bodyData {
            try decoder.handleConflictingOneOf()
            if case .body(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._bodyData = .body(v)}
        case 2: try decoder.decodeSingularMessageField(value: &_storage._sigs)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sigMap)
        case 4:
          if _storage._bodyData != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._bodyData = .bodyBytes(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if case .body(let v)? = _storage._bodyData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._sigs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._sigMap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if case .bodyBytes(let v)? = _storage._bodyData {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Transaction, rhs: Proto_Transaction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bodyData != rhs_storage._bodyData {return false}
        if _storage._sigs != rhs_storage._sigs {return false}
        if _storage._sigMap != rhs_storage._sigMap {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
