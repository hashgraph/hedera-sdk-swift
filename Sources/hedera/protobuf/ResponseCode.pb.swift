// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ResponseCode.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Proto_ResponseCodeEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The transaction passed the precheck validations.
  case ok // = 0

  /// For any error not handled by specific error codes listed below.
  case invalidTransaction // = 1

  ///Payer account does not exist.
  case payerAccountNotFound // = 2

  ///Node Account provided does not match the node account of the node the transaction was submitted to.
  case invalidNodeAccount // = 3

  /// Pre-Check error when TransactionValidStart + transactionValidDuration is less than current consensus time.
  case transactionExpired // = 4

  /// Transaction start time is greater than current consensus time
  case invalidTransactionStart // = 5

  ///valid transaction duration is a positive non zero number that does not exceed 120 seconds
  case invalidTransactionDuration // = 6

  /// The transaction signature is not valid
  case invalidSignature // = 7

  ///Transaction memo size exceeded 100 bytes
  case memoTooLong // = 8

  /// The fee provided in the transaction is insufficient for this type of transaction
  case insufficientTxFee // = 9

  /// The payer account has insufficient cryptocurrency to pay the transaction fee
  case insufficientPayerBalance // = 10

  /// This transaction ID is a duplicate of one that was submitted to this node or reached consensus in the last 180 seconds (receipt period)
  case duplicateTransaction // = 11

  ///If API is throttled out
  case busy // = 12

  ///The API is not currently supported
  case notSupported // = 13

  ///The file id is invalid or does not exist
  case invalidFileID // = 14

  ///The account id is invalid or does not exist
  case invalidAccountID // = 15

  ///The contract id is invalid or does not exist
  case invalidContractID // = 16

  ///Transaction id is not valid
  case invalidTransactionID // = 17

  ///Receipt for given transaction id does not exist
  case receiptNotFound // = 18

  ///Record for given transaction id does not exist
  case recordNotFound // = 19

  ///The solidity id is invalid or entity with this solidity id does not exist
  case invalidSolidityID // = 20

  /// Transaction hasn't yet reached consensus, or has already expired
  case unknown // = 21

  /// The transaction succeeded
  case success // = 22

  /// There was a system error and the transaction failed because of invalid request parameters.
  case failInvalid // = 23

  /// There was a system error while performing fee calculation, reserved for future.
  case failFee // = 24

  /// There was a system error while performing balance checks, reserved for future.
  case failBalance // = 25

  ///Key not provided in the transaction body
  case keyRequired // = 26

  ///Unsupported algorithm/encoding used for keys in the transaction
  case badEncoding // = 27

  ///When the account balance is not sufficient for the transfer
  case insufficientAccountBalance // = 28

  ///During an update transaction when the system is not able to find the Users Solidity address
  case invalidSolidityAddress // = 29

  ///Not enough gas was supplied to execute transaction
  case insufficientGas // = 30

  ///contract byte code size is over the limit
  case contractSizeLimitExceeded // = 31

  ///local execution (query) is requested for a function which changes state
  case localCallModificationException // = 32

  ///Contract REVERT OPCODE executed
  case contractRevertExecuted // = 33

  ///For any contract execution related error not handled by specific error codes listed above.
  case contractExecutionException // = 34

  ///In Query validation, account with +ve(amount) value should be Receiving node account, the receiver account should be only one account in the list
  case invalidReceivingNodeAccount // = 35

  /// Header is missing in Query request
  case missingQueryHeader // = 36

  /// The update of the account failed
  case accountUpdateFailed // = 37

  /// Provided key encoding was not supported by the system
  case invalidKeyEncoding // = 38

  /// null solidity address
  case nullSolidityAddress // = 39

  /// update of the contract failed
  case contractUpdateFailed // = 40

  /// the query header is invalid
  case invalidQueryHeader // = 41

  /// Invalid fee submitted
  case invalidFeeSubmitted // = 42

  /// Payer signature is invalid
  case invalidPayerSignature // = 43

  /// The keys were not provided in the request.
  case keyNotProvided // = 44

  /// Expiration time provided in the transaction was invalid.
  case invalidExpirationTime // = 45

  ///WriteAccess Control Keys are not provided for the file
  case noWaclKey // = 46

  ///The contents of file are provided as empty.
  case fileContentEmpty // = 47

  /// The crypto transfer credit and debit do not sum equal to 0
  case invalidAccountAmounts // = 48

  /// Transaction body provided is empty
  case emptyTransactionBody // = 49

  /// Invalid transaction body provided
  case invalidTransactionBody // = 50

  /// the type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of signature (base ed25519 signature, SignatureList, or ThresholdKeySignature)
  case invalidSignatureTypeMismatchingKey // = 51

  /// the number of key (KeyList, or ThresholdKey) does not match that of signature (SignatureList, or ThresholdKeySignature). e.g. if a keyList has 3 base keys, then the corresponding signatureList should also have 3 base signatures.
  case invalidSignatureCountMismatchingKey // = 52

  /// the claim body is empty
  case emptyClaimBody // = 53

  ///the hash for the claim is empty
  case emptyClaimHash // = 54

  /// the key list is empty
  case emptyClaimKeys // = 55

  /// the size of the claim hash is not 48 bytes
  case invalidClaimHashSize // = 56

  /// the query body is empty
  case emptyQueryBody // = 57

  /// the crypto claim query is empty
  case emptyClaimQuery // = 58

  /// the crypto claim doesn't exists in the file system. It expired or was never persisted.
  case claimNotFound // = 59

  /// the account id passed has not yet been created.
  case accountIDDoesNotExist // = 60

  /// the claim hash already exists
  case claimAlreadyExists // = 61

  /// File WACL keys are invalid
  case invalidFileWacl // = 62

  /// Serialization failure
  case serializationFailed // = 63

  /// The size of the Transaction is greater than transactionMaxBytes
  case transactionOversize // = 64

  /// The Transaction has more than 50 levels
  case transactionTooManyLayers // = 65

  ///Contract is marked as deleted
  case contractDeleted // = 66

  /// the platform node is either disconnected or lagging behind.
  case platformNotActive // = 67

  /// one public key matches more than one prefixes on the signature map
  case keyPrefixMismatch // = 68

  /// transaction not created by platform due to either large backlog or message size exceeded transactionMaxBytes
  case platformTransactionNotCreated // = 69

  /// auto renewal period is not a positive number of seconds
  case invalidRenewalPeriod // = 70

  /// the response code when a smart contract id is passed for a crypto API request
  case invalidPayerAccountID // = 71

  /// the account has been marked as deleted
  case accountDeleted // = 72

  /// the file has been marked as deleted
  case fileDeleted // = 73

  /// same accounts repeated in the transfer account list
  case accountRepeatedInAccountAmounts // = 74

  /// attempting to set negative balance value for crypto account
  case settingNegativeAccountBalance // = 75

  /// when deleting smart contract that has crypto balance either transfer account or transfer smart contract is required
  case obtainerRequired // = 76

  ///when deleting smart contract that has crypto balance you can not use the same contract id as transferContractId as the one being deleted
  case obtainerSameContractID // = 77

  ///transferAccountId or transferContractId specified for contract delete does not exist
  case obtainerDoesNotExist // = 78

  ///attempting to modify (update or delete a immutable smart contract, i.e. one created without a admin key)
  case modifyingImmutableContract // = 79

  ///Unexpected exception thrown by file system functions
  case fileSystemException // = 80

  /// the duration is not a subset of [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION]
  case autorenewDurationNotInRange // = 81

  /// Decoding the smart contract binary to a byte array failed. Check that the input is a valid hex string.
  case errorDecodingBytestring // = 82

  /// File to create a smart contract was of length zero
  case contractFileEmpty // = 83

  /// Bytecode for smart contract is of length zero
  case contractBytecodeEmpty // = 84

  /// Attempt to set negative initial balance
  case invalidInitialBalance // = 85

  /// attempt to set negative receive record threshold
  case invalidReceiveRecordThreshold // = 86

  /// attempt to set negative send record threshold
  case invalidSendRecordThreshold // = 87

  /// Special Account Operations should be performed by only Genesis account, return this code if it is not Genesis Account
  case accountIsNotGenesisAccount // = 88

  /// The fee payer account doesn't have permission to submit such Transaction
  case payerAccountUnauthorized // = 89

  /// FreezeTransactionBody is invalid
  case invalidFreezeTransactionBody // = 90

  /// FreezeTransactionBody does not exist
  case freezeTransactionBodyNotFound // = 91

  ///Exceeded the number of accounts (both from and to) allowed for crypto transfer list
  case transferListSizeLimitExceeded // = 92

  /// Smart contract result size greater than specified maxResultSize
  case resultSizeLimitExceeded // = 93

  ///The payer account is not a special account(account 0.0.55)
  case notSpecialAccount // = 94

  /// Negative gas was offered in smart contract call
  case contractNegativeGas // = 95

  /// Negative value / initial balance was specified in a smart contract call / create
  case contractNegativeValue // = 96

  /// Failed to update fee file
  case invalidFeeFile // = 97

  /// Failed to update exchange rate file
  case invalidExchangeRateFile // = 98

  /// Payment tendered for contract local call cannot cover both the fee and the gas
  case insufficientLocalCallGas // = 99

  /// Entities with Entity ID below 1000 are not allowed to be deleted
  case entityNotAllowedToDelete // = 100

  /// Violating one of these rules: 1) treasury account can update all entities below 0.0.1000, 2) account 0.0.50 can update all entities from 0.0.51 - 0.0.80, 3) Network Function Master Account A/c 0.0.50 - Update all Network Function accounts & perform all the Network Functions listed below, 4) Network Function Accounts: i) A/c 0.0.55 - Update Address Book files (0.0.101/102), ii) A/c 0.0.56 - Update Fee schedule (0.0.111), iii) A/c 0.0.57 - Update Exchange Rate (0.0.112).
  case authorizationFailed // = 101

  /// Fee Schedule Proto uploaded but not valid (append or update is required)
  case fileUploadedProtoInvalid // = 102

  /// Fee Schedule Proto uploaded but not valid (append or update is required)
  case fileUploadedProtoNotSavedToDisk // = 103

  /// Fee Schedule Proto File Part uploaded
  case feeScheduleFilePartUploaded // = 104

  /// The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage
  case exchangeRateChangeLimitExceeded // = 105
  case UNRECOGNIZED(Int)

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .invalidTransaction
    case 2: self = .payerAccountNotFound
    case 3: self = .invalidNodeAccount
    case 4: self = .transactionExpired
    case 5: self = .invalidTransactionStart
    case 6: self = .invalidTransactionDuration
    case 7: self = .invalidSignature
    case 8: self = .memoTooLong
    case 9: self = .insufficientTxFee
    case 10: self = .insufficientPayerBalance
    case 11: self = .duplicateTransaction
    case 12: self = .busy
    case 13: self = .notSupported
    case 14: self = .invalidFileID
    case 15: self = .invalidAccountID
    case 16: self = .invalidContractID
    case 17: self = .invalidTransactionID
    case 18: self = .receiptNotFound
    case 19: self = .recordNotFound
    case 20: self = .invalidSolidityID
    case 21: self = .unknown
    case 22: self = .success
    case 23: self = .failInvalid
    case 24: self = .failFee
    case 25: self = .failBalance
    case 26: self = .keyRequired
    case 27: self = .badEncoding
    case 28: self = .insufficientAccountBalance
    case 29: self = .invalidSolidityAddress
    case 30: self = .insufficientGas
    case 31: self = .contractSizeLimitExceeded
    case 32: self = .localCallModificationException
    case 33: self = .contractRevertExecuted
    case 34: self = .contractExecutionException
    case 35: self = .invalidReceivingNodeAccount
    case 36: self = .missingQueryHeader
    case 37: self = .accountUpdateFailed
    case 38: self = .invalidKeyEncoding
    case 39: self = .nullSolidityAddress
    case 40: self = .contractUpdateFailed
    case 41: self = .invalidQueryHeader
    case 42: self = .invalidFeeSubmitted
    case 43: self = .invalidPayerSignature
    case 44: self = .keyNotProvided
    case 45: self = .invalidExpirationTime
    case 46: self = .noWaclKey
    case 47: self = .fileContentEmpty
    case 48: self = .invalidAccountAmounts
    case 49: self = .emptyTransactionBody
    case 50: self = .invalidTransactionBody
    case 51: self = .invalidSignatureTypeMismatchingKey
    case 52: self = .invalidSignatureCountMismatchingKey
    case 53: self = .emptyClaimBody
    case 54: self = .emptyClaimHash
    case 55: self = .emptyClaimKeys
    case 56: self = .invalidClaimHashSize
    case 57: self = .emptyQueryBody
    case 58: self = .emptyClaimQuery
    case 59: self = .claimNotFound
    case 60: self = .accountIDDoesNotExist
    case 61: self = .claimAlreadyExists
    case 62: self = .invalidFileWacl
    case 63: self = .serializationFailed
    case 64: self = .transactionOversize
    case 65: self = .transactionTooManyLayers
    case 66: self = .contractDeleted
    case 67: self = .platformNotActive
    case 68: self = .keyPrefixMismatch
    case 69: self = .platformTransactionNotCreated
    case 70: self = .invalidRenewalPeriod
    case 71: self = .invalidPayerAccountID
    case 72: self = .accountDeleted
    case 73: self = .fileDeleted
    case 74: self = .accountRepeatedInAccountAmounts
    case 75: self = .settingNegativeAccountBalance
    case 76: self = .obtainerRequired
    case 77: self = .obtainerSameContractID
    case 78: self = .obtainerDoesNotExist
    case 79: self = .modifyingImmutableContract
    case 80: self = .fileSystemException
    case 81: self = .autorenewDurationNotInRange
    case 82: self = .errorDecodingBytestring
    case 83: self = .contractFileEmpty
    case 84: self = .contractBytecodeEmpty
    case 85: self = .invalidInitialBalance
    case 86: self = .invalidReceiveRecordThreshold
    case 87: self = .invalidSendRecordThreshold
    case 88: self = .accountIsNotGenesisAccount
    case 89: self = .payerAccountUnauthorized
    case 90: self = .invalidFreezeTransactionBody
    case 91: self = .freezeTransactionBodyNotFound
    case 92: self = .transferListSizeLimitExceeded
    case 93: self = .resultSizeLimitExceeded
    case 94: self = .notSpecialAccount
    case 95: self = .contractNegativeGas
    case 96: self = .contractNegativeValue
    case 97: self = .invalidFeeFile
    case 98: self = .invalidExchangeRateFile
    case 99: self = .insufficientLocalCallGas
    case 100: self = .entityNotAllowedToDelete
    case 101: self = .authorizationFailed
    case 102: self = .fileUploadedProtoInvalid
    case 103: self = .fileUploadedProtoNotSavedToDisk
    case 104: self = .feeScheduleFilePartUploaded
    case 105: self = .exchangeRateChangeLimitExceeded
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ok: return 0
    case .invalidTransaction: return 1
    case .payerAccountNotFound: return 2
    case .invalidNodeAccount: return 3
    case .transactionExpired: return 4
    case .invalidTransactionStart: return 5
    case .invalidTransactionDuration: return 6
    case .invalidSignature: return 7
    case .memoTooLong: return 8
    case .insufficientTxFee: return 9
    case .insufficientPayerBalance: return 10
    case .duplicateTransaction: return 11
    case .busy: return 12
    case .notSupported: return 13
    case .invalidFileID: return 14
    case .invalidAccountID: return 15
    case .invalidContractID: return 16
    case .invalidTransactionID: return 17
    case .receiptNotFound: return 18
    case .recordNotFound: return 19
    case .invalidSolidityID: return 20
    case .unknown: return 21
    case .success: return 22
    case .failInvalid: return 23
    case .failFee: return 24
    case .failBalance: return 25
    case .keyRequired: return 26
    case .badEncoding: return 27
    case .insufficientAccountBalance: return 28
    case .invalidSolidityAddress: return 29
    case .insufficientGas: return 30
    case .contractSizeLimitExceeded: return 31
    case .localCallModificationException: return 32
    case .contractRevertExecuted: return 33
    case .contractExecutionException: return 34
    case .invalidReceivingNodeAccount: return 35
    case .missingQueryHeader: return 36
    case .accountUpdateFailed: return 37
    case .invalidKeyEncoding: return 38
    case .nullSolidityAddress: return 39
    case .contractUpdateFailed: return 40
    case .invalidQueryHeader: return 41
    case .invalidFeeSubmitted: return 42
    case .invalidPayerSignature: return 43
    case .keyNotProvided: return 44
    case .invalidExpirationTime: return 45
    case .noWaclKey: return 46
    case .fileContentEmpty: return 47
    case .invalidAccountAmounts: return 48
    case .emptyTransactionBody: return 49
    case .invalidTransactionBody: return 50
    case .invalidSignatureTypeMismatchingKey: return 51
    case .invalidSignatureCountMismatchingKey: return 52
    case .emptyClaimBody: return 53
    case .emptyClaimHash: return 54
    case .emptyClaimKeys: return 55
    case .invalidClaimHashSize: return 56
    case .emptyQueryBody: return 57
    case .emptyClaimQuery: return 58
    case .claimNotFound: return 59
    case .accountIDDoesNotExist: return 60
    case .claimAlreadyExists: return 61
    case .invalidFileWacl: return 62
    case .serializationFailed: return 63
    case .transactionOversize: return 64
    case .transactionTooManyLayers: return 65
    case .contractDeleted: return 66
    case .platformNotActive: return 67
    case .keyPrefixMismatch: return 68
    case .platformTransactionNotCreated: return 69
    case .invalidRenewalPeriod: return 70
    case .invalidPayerAccountID: return 71
    case .accountDeleted: return 72
    case .fileDeleted: return 73
    case .accountRepeatedInAccountAmounts: return 74
    case .settingNegativeAccountBalance: return 75
    case .obtainerRequired: return 76
    case .obtainerSameContractID: return 77
    case .obtainerDoesNotExist: return 78
    case .modifyingImmutableContract: return 79
    case .fileSystemException: return 80
    case .autorenewDurationNotInRange: return 81
    case .errorDecodingBytestring: return 82
    case .contractFileEmpty: return 83
    case .contractBytecodeEmpty: return 84
    case .invalidInitialBalance: return 85
    case .invalidReceiveRecordThreshold: return 86
    case .invalidSendRecordThreshold: return 87
    case .accountIsNotGenesisAccount: return 88
    case .payerAccountUnauthorized: return 89
    case .invalidFreezeTransactionBody: return 90
    case .freezeTransactionBodyNotFound: return 91
    case .transferListSizeLimitExceeded: return 92
    case .resultSizeLimitExceeded: return 93
    case .notSpecialAccount: return 94
    case .contractNegativeGas: return 95
    case .contractNegativeValue: return 96
    case .invalidFeeFile: return 97
    case .invalidExchangeRateFile: return 98
    case .insufficientLocalCallGas: return 99
    case .entityNotAllowedToDelete: return 100
    case .authorizationFailed: return 101
    case .fileUploadedProtoInvalid: return 102
    case .fileUploadedProtoNotSavedToDisk: return 103
    case .feeScheduleFilePartUploaded: return 104
    case .exchangeRateChangeLimitExceeded: return 105
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_ResponseCodeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_ResponseCodeEnum] = [
    .ok,
    .invalidTransaction,
    .payerAccountNotFound,
    .invalidNodeAccount,
    .transactionExpired,
    .invalidTransactionStart,
    .invalidTransactionDuration,
    .invalidSignature,
    .memoTooLong,
    .insufficientTxFee,
    .insufficientPayerBalance,
    .duplicateTransaction,
    .busy,
    .notSupported,
    .invalidFileID,
    .invalidAccountID,
    .invalidContractID,
    .invalidTransactionID,
    .receiptNotFound,
    .recordNotFound,
    .invalidSolidityID,
    .unknown,
    .success,
    .failInvalid,
    .failFee,
    .failBalance,
    .keyRequired,
    .badEncoding,
    .insufficientAccountBalance,
    .invalidSolidityAddress,
    .insufficientGas,
    .contractSizeLimitExceeded,
    .localCallModificationException,
    .contractRevertExecuted,
    .contractExecutionException,
    .invalidReceivingNodeAccount,
    .missingQueryHeader,
    .accountUpdateFailed,
    .invalidKeyEncoding,
    .nullSolidityAddress,
    .contractUpdateFailed,
    .invalidQueryHeader,
    .invalidFeeSubmitted,
    .invalidPayerSignature,
    .keyNotProvided,
    .invalidExpirationTime,
    .noWaclKey,
    .fileContentEmpty,
    .invalidAccountAmounts,
    .emptyTransactionBody,
    .invalidTransactionBody,
    .invalidSignatureTypeMismatchingKey,
    .invalidSignatureCountMismatchingKey,
    .emptyClaimBody,
    .emptyClaimHash,
    .emptyClaimKeys,
    .invalidClaimHashSize,
    .emptyQueryBody,
    .emptyClaimQuery,
    .claimNotFound,
    .accountIDDoesNotExist,
    .claimAlreadyExists,
    .invalidFileWacl,
    .serializationFailed,
    .transactionOversize,
    .transactionTooManyLayers,
    .contractDeleted,
    .platformNotActive,
    .keyPrefixMismatch,
    .platformTransactionNotCreated,
    .invalidRenewalPeriod,
    .invalidPayerAccountID,
    .accountDeleted,
    .fileDeleted,
    .accountRepeatedInAccountAmounts,
    .settingNegativeAccountBalance,
    .obtainerRequired,
    .obtainerSameContractID,
    .obtainerDoesNotExist,
    .modifyingImmutableContract,
    .fileSystemException,
    .autorenewDurationNotInRange,
    .errorDecodingBytestring,
    .contractFileEmpty,
    .contractBytecodeEmpty,
    .invalidInitialBalance,
    .invalidReceiveRecordThreshold,
    .invalidSendRecordThreshold,
    .accountIsNotGenesisAccount,
    .payerAccountUnauthorized,
    .invalidFreezeTransactionBody,
    .freezeTransactionBodyNotFound,
    .transferListSizeLimitExceeded,
    .resultSizeLimitExceeded,
    .notSpecialAccount,
    .contractNegativeGas,
    .contractNegativeValue,
    .invalidFeeFile,
    .invalidExchangeRateFile,
    .insufficientLocalCallGas,
    .entityNotAllowedToDelete,
    .authorizationFailed,
    .fileUploadedProtoInvalid,
    .fileUploadedProtoNotSavedToDisk,
    .feeScheduleFilePartUploaded,
    .exchangeRateChangeLimitExceeded,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Proto_ResponseCodeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "INVALID_TRANSACTION"),
    2: .same(proto: "PAYER_ACCOUNT_NOT_FOUND"),
    3: .same(proto: "INVALID_NODE_ACCOUNT"),
    4: .same(proto: "TRANSACTION_EXPIRED"),
    5: .same(proto: "INVALID_TRANSACTION_START"),
    6: .same(proto: "INVALID_TRANSACTION_DURATION"),
    7: .same(proto: "INVALID_SIGNATURE"),
    8: .same(proto: "MEMO_TOO_LONG"),
    9: .same(proto: "INSUFFICIENT_TX_FEE"),
    10: .same(proto: "INSUFFICIENT_PAYER_BALANCE"),
    11: .same(proto: "DUPLICATE_TRANSACTION"),
    12: .same(proto: "BUSY"),
    13: .same(proto: "NOT_SUPPORTED"),
    14: .same(proto: "INVALID_FILE_ID"),
    15: .same(proto: "INVALID_ACCOUNT_ID"),
    16: .same(proto: "INVALID_CONTRACT_ID"),
    17: .same(proto: "INVALID_TRANSACTION_ID"),
    18: .same(proto: "RECEIPT_NOT_FOUND"),
    19: .same(proto: "RECORD_NOT_FOUND"),
    20: .same(proto: "INVALID_SOLIDITY_ID"),
    21: .same(proto: "UNKNOWN"),
    22: .same(proto: "SUCCESS"),
    23: .same(proto: "FAIL_INVALID"),
    24: .same(proto: "FAIL_FEE"),
    25: .same(proto: "FAIL_BALANCE"),
    26: .same(proto: "KEY_REQUIRED"),
    27: .same(proto: "BAD_ENCODING"),
    28: .same(proto: "INSUFFICIENT_ACCOUNT_BALANCE"),
    29: .same(proto: "INVALID_SOLIDITY_ADDRESS"),
    30: .same(proto: "INSUFFICIENT_GAS"),
    31: .same(proto: "CONTRACT_SIZE_LIMIT_EXCEEDED"),
    32: .same(proto: "LOCAL_CALL_MODIFICATION_EXCEPTION"),
    33: .same(proto: "CONTRACT_REVERT_EXECUTED"),
    34: .same(proto: "CONTRACT_EXECUTION_EXCEPTION"),
    35: .same(proto: "INVALID_RECEIVING_NODE_ACCOUNT"),
    36: .same(proto: "MISSING_QUERY_HEADER"),
    37: .same(proto: "ACCOUNT_UPDATE_FAILED"),
    38: .same(proto: "INVALID_KEY_ENCODING"),
    39: .same(proto: "NULL_SOLIDITY_ADDRESS"),
    40: .same(proto: "CONTRACT_UPDATE_FAILED"),
    41: .same(proto: "INVALID_QUERY_HEADER"),
    42: .same(proto: "INVALID_FEE_SUBMITTED"),
    43: .same(proto: "INVALID_PAYER_SIGNATURE"),
    44: .same(proto: "KEY_NOT_PROVIDED"),
    45: .same(proto: "INVALID_EXPIRATION_TIME"),
    46: .same(proto: "NO_WACL_KEY"),
    47: .same(proto: "FILE_CONTENT_EMPTY"),
    48: .same(proto: "INVALID_ACCOUNT_AMOUNTS"),
    49: .same(proto: "EMPTY_TRANSACTION_BODY"),
    50: .same(proto: "INVALID_TRANSACTION_BODY"),
    51: .same(proto: "INVALID_SIGNATURE_TYPE_MISMATCHING_KEY"),
    52: .same(proto: "INVALID_SIGNATURE_COUNT_MISMATCHING_KEY"),
    53: .same(proto: "EMPTY_CLAIM_BODY"),
    54: .same(proto: "EMPTY_CLAIM_HASH"),
    55: .same(proto: "EMPTY_CLAIM_KEYS"),
    56: .same(proto: "INVALID_CLAIM_HASH_SIZE"),
    57: .same(proto: "EMPTY_QUERY_BODY"),
    58: .same(proto: "EMPTY_CLAIM_QUERY"),
    59: .same(proto: "CLAIM_NOT_FOUND"),
    60: .same(proto: "ACCOUNT_ID_DOES_NOT_EXIST"),
    61: .same(proto: "CLAIM_ALREADY_EXISTS"),
    62: .same(proto: "INVALID_FILE_WACL"),
    63: .same(proto: "SERIALIZATION_FAILED"),
    64: .same(proto: "TRANSACTION_OVERSIZE"),
    65: .same(proto: "TRANSACTION_TOO_MANY_LAYERS"),
    66: .same(proto: "CONTRACT_DELETED"),
    67: .same(proto: "PLATFORM_NOT_ACTIVE"),
    68: .same(proto: "KEY_PREFIX_MISMATCH"),
    69: .same(proto: "PLATFORM_TRANSACTION_NOT_CREATED"),
    70: .same(proto: "INVALID_RENEWAL_PERIOD"),
    71: .same(proto: "INVALID_PAYER_ACCOUNT_ID"),
    72: .same(proto: "ACCOUNT_DELETED"),
    73: .same(proto: "FILE_DELETED"),
    74: .same(proto: "ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS"),
    75: .same(proto: "SETTING_NEGATIVE_ACCOUNT_BALANCE"),
    76: .same(proto: "OBTAINER_REQUIRED"),
    77: .same(proto: "OBTAINER_SAME_CONTRACT_ID"),
    78: .same(proto: "OBTAINER_DOES_NOT_EXIST"),
    79: .same(proto: "MODIFYING_IMMUTABLE_CONTRACT"),
    80: .same(proto: "FILE_SYSTEM_EXCEPTION"),
    81: .same(proto: "AUTORENEW_DURATION_NOT_IN_RANGE"),
    82: .same(proto: "ERROR_DECODING_BYTESTRING"),
    83: .same(proto: "CONTRACT_FILE_EMPTY"),
    84: .same(proto: "CONTRACT_BYTECODE_EMPTY"),
    85: .same(proto: "INVALID_INITIAL_BALANCE"),
    86: .same(proto: "INVALID_RECEIVE_RECORD_THRESHOLD"),
    87: .same(proto: "INVALID_SEND_RECORD_THRESHOLD"),
    88: .same(proto: "ACCOUNT_IS_NOT_GENESIS_ACCOUNT"),
    89: .same(proto: "PAYER_ACCOUNT_UNAUTHORIZED"),
    90: .same(proto: "INVALID_FREEZE_TRANSACTION_BODY"),
    91: .same(proto: "FREEZE_TRANSACTION_BODY_NOT_FOUND"),
    92: .same(proto: "TRANSFER_LIST_SIZE_LIMIT_EXCEEDED"),
    93: .same(proto: "RESULT_SIZE_LIMIT_EXCEEDED"),
    94: .same(proto: "NOT_SPECIAL_ACCOUNT"),
    95: .same(proto: "CONTRACT_NEGATIVE_GAS"),
    96: .same(proto: "CONTRACT_NEGATIVE_VALUE"),
    97: .same(proto: "INVALID_FEE_FILE"),
    98: .same(proto: "INVALID_EXCHANGE_RATE_FILE"),
    99: .same(proto: "INSUFFICIENT_LOCAL_CALL_GAS"),
    100: .same(proto: "ENTITY_NOT_ALLOWED_TO_DELETE"),
    101: .same(proto: "AUTHORIZATION_FAILED"),
    102: .same(proto: "FILE_UPLOADED_PROTO_INVALID"),
    103: .same(proto: "FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK"),
    104: .same(proto: "FEE_SCHEDULE_FILE_PART_UPLOADED"),
    105: .same(proto: "EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED"),
  ]
}
