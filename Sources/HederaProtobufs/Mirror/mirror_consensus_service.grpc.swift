//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: consensus_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

///*
/// The Mirror Service provides the ability to query a stream of Hedera Consensus Service (HCS)
/// messages for an HCS Topic via a specific (possibly open-ended) time range.
///
/// Usage: instantiate `Com_Hedera_Mirror_Api_Proto_ConsensusServiceClient`, then call methods of this protocol to make API calls.
public protocol Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol? { get }

    func subscribeTopic(
        _ request: Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery,
        callOptions: CallOptions?,
        handler: @escaping (Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse) -> Void
    ) -> ServerStreamingCall<
        Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery, Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse
    >
}

extension Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientProtocol {
    public var serviceName: String {
        return "com.hedera.mirror.api.proto.ConsensusService"
    }

    /// Server streaming call to subscribeTopic
    ///
    /// - Parameters:
    ///   - request: Request to send to subscribeTopic.
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
    public func subscribeTopic(
        _ request: Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery,
        callOptions: CallOptions? = nil,
        handler: @escaping (Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse) -> Void
    ) -> ServerStreamingCall<
        Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery, Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse
    > {
        return self.makeServerStreamingCall(
            path: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientMetadata.Methods.subscribeTopic.path,
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makesubscribeTopicInterceptors() ?? [],
            handler: handler
        )
    }
}

@available(*, deprecated)
extension Com_Hedera_Mirror_Api_Proto_ConsensusServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Com_Hedera_Mirror_Api_Proto_ConsensusServiceNIOClient")
public final class Com_Hedera_Mirror_Api_Proto_ConsensusServiceClient:
    Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientProtocol
{
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol?
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions {
        get { self.lock.withLock { return self._defaultCallOptions } }
        set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
    }
    public var interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol? {
        get { self.lock.withLock { return self._interceptors } }
        set { self.lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the com.hedera.mirror.api.proto.ConsensusService service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self._defaultCallOptions = defaultCallOptions
        self._interceptors = interceptors
    }
}

public struct Com_Hedera_Mirror_Api_Proto_ConsensusServiceNIOClient:
    Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientProtocol
{
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol?

    /// Creates a client for the com.hedera.mirror.api.proto.ConsensusService service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

///*
/// The Mirror Service provides the ability to query a stream of Hedera Consensus Service (HCS)
/// messages for an HCS Topic via a specific (possibly open-ended) time range.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Com_Hedera_Mirror_Api_Proto_ConsensusServiceAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol? { get }

    func makeSubscribeTopicCall(
        _ request: Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery,
        callOptions: CallOptions?
    ) -> GRPCAsyncServerStreamingCall<
        Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery, Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse
    >
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Hedera_Mirror_Api_Proto_ConsensusServiceAsyncClientProtocol {
    public static var serviceDescriptor: GRPCServiceDescriptor {
        return Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientMetadata.serviceDescriptor
    }

    public var interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol? {
        return nil
    }

    public func makeSubscribeTopicCall(
        _ request: Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncServerStreamingCall<
        Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery, Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse
    > {
        return self.makeAsyncServerStreamingCall(
            path: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientMetadata.Methods.subscribeTopic.path,
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makesubscribeTopicInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Com_Hedera_Mirror_Api_Proto_ConsensusServiceAsyncClientProtocol {
    public func subscribeTopic(
        _ request: Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse> {
        return self.performAsyncServerStreamingCall(
            path: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientMetadata.Methods.subscribeTopic.path,
            request: request,
            callOptions: callOptions ?? self.defaultCallOptions,
            interceptors: self.interceptors?.makesubscribeTopicInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Com_Hedera_Mirror_Api_Proto_ConsensusServiceAsyncClient:
    Com_Hedera_Mirror_Api_Proto_ConsensusServiceAsyncClientProtocol
{
    public var channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol?

    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

public protocol Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientInterceptorFactoryProtocol: Sendable {

    /// - Returns: Interceptors to use when invoking 'subscribeTopic'.
    func makesubscribeTopicInterceptors() -> [ClientInterceptor<
        Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery, Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse
    >]
}

public enum Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientMetadata {
    public static let serviceDescriptor = GRPCServiceDescriptor(
        name: "ConsensusService",
        fullName: "com.hedera.mirror.api.proto.ConsensusService",
        methods: [
            Com_Hedera_Mirror_Api_Proto_ConsensusServiceClientMetadata.Methods.subscribeTopic
        ]
    )

    public enum Methods {
        public static let subscribeTopic = GRPCMethodDescriptor(
            name: "subscribeTopic",
            path: "/com.hedera.mirror.api.proto.ConsensusService/subscribeTopic",
            type: GRPCCallType.serverStreaming
        )
    }
}
