// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/blockrecords/running_hashes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// The running hash of a transaction records and the previous 3 running hashes. All hashes are 48 bytes SHA384 hashes. If the
/// running hashes do not exist yet then they will be default values witch is empty bytes object or zero length byte array.
public struct Proto_RunningHashes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A running hash of all record stream items
  public var runningHash: Data = Data()

  ///*
  /// The previous running hash of all record stream items
  public var nMinus1RunningHash: Data = Data()

  ///*
  /// The previous, previous running hash of all record stream items
  public var nMinus2RunningHash: Data = Data()

  ///*
  /// The previous, previous, previous running hash of all record stream items
  public var nMinus3RunningHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_RunningHashes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RunningHashes"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "running_hash"),
    2: .standard(proto: "n_minus_1_running_hash"),
    3: .standard(proto: "n_minus_2_running_hash"),
    4: .standard(proto: "n_minus_3_running_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.runningHash) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.nMinus1RunningHash) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.nMinus2RunningHash) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.nMinus3RunningHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.runningHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.runningHash, fieldNumber: 1)
    }
    if !self.nMinus1RunningHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.nMinus1RunningHash, fieldNumber: 2)
    }
    if !self.nMinus2RunningHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.nMinus2RunningHash, fieldNumber: 3)
    }
    if !self.nMinus3RunningHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.nMinus3RunningHash, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_RunningHashes, rhs: Proto_RunningHashes) -> Bool {
    if lhs.runningHash != rhs.runningHash {return false}
    if lhs.nMinus1RunningHash != rhs.nMinus1RunningHash {return false}
    if lhs.nMinus2RunningHash != rhs.nMinus2RunningHash {return false}
    if lhs.nMinus3RunningHash != rhs.nMinus3RunningHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
