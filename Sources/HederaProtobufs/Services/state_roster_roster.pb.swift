// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/roster/roster.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A single roster in the network state.
/// <p>
/// The roster SHALL be a list of `RosterEntry` objects.
public struct Com_Hedera_Hapi_Node_State_Roster_Roster: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// List of roster entries, one per consensus node.
  /// <p>
  /// This list SHALL contain roster entries in natural order of ascending node ids.
  /// This list SHALL NOT be empty.<br/>
  public var rosterEntries: [Com_Hedera_Hapi_Node_State_Roster_RosterEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// A single roster entry in the network state.
///
/// Each roster entry SHALL encapsulate the elements required
/// to manage node participation in the Threshold Signature Scheme (TSS).<br/>
/// All fields except tss_encryption_key are REQUIRED.
public struct Com_Hedera_Hapi_Node_State_Roster_RosterEntry: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A consensus node identifier.
  /// <p>
  /// Node identifiers SHALL be unique _within_ a ledger,
  /// and MUST NOT be repeated _between_ shards and realms.
  public var nodeID: UInt64 = 0

  ///*
  /// A consensus weight.
  /// <p>
  /// Each node SHALL have a weight of zero or more in consensus calculations.<br/>
  /// The sum of the weights of all nodes in the roster SHALL form the total weight of the system,
  /// and each node's individual weight SHALL be proportional to that sum.<br/>
  public var weight: UInt64 = 0

  ///*
  /// An RSA public certificate used for signing gossip events.
  /// <p>
  /// This value SHALL be a certificate of a type permitted for gossip
  /// signatures.<br/>
  /// This value SHALL be the DER encoding of the certificate presented.<br/>
  /// This field is REQUIRED and MUST NOT be empty.
  public var gossipCaCertificate: Data = Data()

  ///*
  /// An elliptic curve public encryption key.<br/>
  /// This is currently an ALT_BN128 curve, but the elliptic curve
  /// type may change in the future. For example,
  /// if the Ethereum ecosystem creates precompiles for BLS12_381,
  /// we may switch to that curve.
  /// <p>
  /// This value SHALL be specified according to EIP-196 and EIP-197 standards,
  /// See <a href='https://eips.ethereum.org/EIPS/eip-196#encoding'>EIP-196</a> and
  /// <a href='https://eips.ethereum.org/EIPS/eip-197#encoding'>EIP-197</a><br/>
  /// This field is _initially_ OPTIONAL (i.e. it can be unset _when created_)
  /// but once set, it is REQUIRED thereafter.
  public var tssEncryptionKey: Data = Data()

  ///*
  /// A list of service endpoints for gossip.
  /// <p>
  /// These endpoints SHALL represent the published endpoints to which other
  /// consensus nodes may _gossip_ transactions.<br/>
  /// If the network configuration value `gossipFqdnRestricted` is set, then
  /// all endpoints in this list SHALL supply only IP address.<br/>
  /// If the network configuration value `gossipFqdnRestricted` is _not_ set,
  /// then endpoints in this list MAY supply either IP address or FQDN, but
  /// SHALL NOT supply both values for the same endpoint.<br/>
  /// This list SHALL NOT be empty.<br/>
  public var gossipEndpoint: [Proto_ServiceEndpoint] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.hedera.hapi.node.state.roster"

extension Com_Hedera_Hapi_Node_State_Roster_Roster: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Roster"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "roster_entries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rosterEntries) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rosterEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rosterEntries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Roster_Roster, rhs: Com_Hedera_Hapi_Node_State_Roster_Roster) -> Bool {
    if lhs.rosterEntries != rhs.rosterEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Hedera_Hapi_Node_State_Roster_RosterEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RosterEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .same(proto: "weight"),
    3: .standard(proto: "gossip_ca_certificate"),
    4: .standard(proto: "tss_encryption_key"),
    5: .standard(proto: "gossip_endpoint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.weight) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.gossipCaCertificate) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.tssEncryptionKey) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.gossipEndpoint) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.nodeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nodeID, fieldNumber: 1)
    }
    if self.weight != 0 {
      try visitor.visitSingularUInt64Field(value: self.weight, fieldNumber: 2)
    }
    if !self.gossipCaCertificate.isEmpty {
      try visitor.visitSingularBytesField(value: self.gossipCaCertificate, fieldNumber: 3)
    }
    if !self.tssEncryptionKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.tssEncryptionKey, fieldNumber: 4)
    }
    if !self.gossipEndpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gossipEndpoint, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Roster_RosterEntry, rhs: Com_Hedera_Hapi_Node_State_Roster_RosterEntry) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.gossipCaCertificate != rhs.gossipCaCertificate {return false}
    if lhs.tssEncryptionKey != rhs.tssEncryptionKey {return false}
    if lhs.gossipEndpoint != rhs.gossipEndpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
