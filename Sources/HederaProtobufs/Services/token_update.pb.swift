// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: token_update.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// At consensus, updates an already created token to the given values.
/// 
/// If no value is given for a field, that field is left unchanged. For an immutable tokens (that is,
/// a token without an admin key), only the expiry may be updated. Setting any other field in that
/// case will cause the transaction status to resolve to TOKEN_IS_IMMUTABLE.
/// 
/// --- Signing Requirements ---
/// 1. Whether or not a token has an admin key, its expiry can be extended with only the transaction
///    payer's signature.
/// 2. Updating any other field of a mutable token requires the admin key's signature.
/// 3. If a new admin key is set, this new key must sign <b>unless</b> it is exactly an empty
///    <tt>KeyList</tt>. This special sentinel key removes the existing admin key and causes the
///    token to become immutable. (Other <tt>Key</tt> structures without a constituent
///    <tt>Ed25519</tt> key will be rejected with <tt>INVALID_ADMIN_KEY</tt>.)
/// 4. If a new treasury is set, the new treasury account's key must sign the transaction.
/// 
/// --- Nft Requirements ---
/// 1. If a non fungible token has a positive treasury balance, the operation will abort with
///    CURRENT_TREASURY_STILL_OWNS_NFTS.
public struct Proto_TokenUpdateTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The Token to be updated
  public var token: Proto_TokenID {
    get {return _storage._token ?? Proto_TokenID()}
    set {_uniqueStorage()._token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {_uniqueStorage()._token = nil}

  ///*
  /// The new publicly visible token symbol. The token symbol is specified as a Unicode string. 
  /// Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).
  public var symbol: String {
    get {return _storage._symbol}
    set {_uniqueStorage()._symbol = newValue}
  }

  ///*
  /// The new publicly visible name of the token. The token name is specified as a Unicode string. 
  /// Its UTF-8 encoding cannot exceed 100 bytes, and cannot contain the 0 byte (NUL).
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  ///*
  /// The new Treasury account of the Token. If the provided treasury account is not existing or
  /// deleted, the response will be INVALID_TREASURY_ACCOUNT_FOR_TOKEN. If successful, the Token
  /// balance held in the previous Treasury Account is transferred to the new one.
  public var treasury: Proto_AccountID {
    get {return _storage._treasury ?? Proto_AccountID()}
    set {_uniqueStorage()._treasury = newValue}
  }
  /// Returns true if `treasury` has been explicitly set.
  public var hasTreasury: Bool {return _storage._treasury != nil}
  /// Clears the value of `treasury`. Subsequent reads from it will return its default value.
  public mutating func clearTreasury() {_uniqueStorage()._treasury = nil}

  ///*
  /// The new admin key of the Token. If Token is immutable, transaction will resolve to
  /// TOKEN_IS_IMMUTABlE.
  public var adminKey: Proto_Key {
    get {return _storage._adminKey ?? Proto_Key()}
    set {_uniqueStorage()._adminKey = newValue}
  }
  /// Returns true if `adminKey` has been explicitly set.
  public var hasAdminKey: Bool {return _storage._adminKey != nil}
  /// Clears the value of `adminKey`. Subsequent reads from it will return its default value.
  public mutating func clearAdminKey() {_uniqueStorage()._adminKey = nil}

  ///*
  /// The new KYC key of the Token. If Token does not have currently a KYC key, transaction will
  /// resolve to TOKEN_HAS_NO_KYC_KEY.
  public var kycKey: Proto_Key {
    get {return _storage._kycKey ?? Proto_Key()}
    set {_uniqueStorage()._kycKey = newValue}
  }
  /// Returns true if `kycKey` has been explicitly set.
  public var hasKycKey: Bool {return _storage._kycKey != nil}
  /// Clears the value of `kycKey`. Subsequent reads from it will return its default value.
  public mutating func clearKycKey() {_uniqueStorage()._kycKey = nil}

  ///*
  /// The new Freeze key of the Token. If the Token does not have currently a Freeze key,
  /// transaction will resolve to TOKEN_HAS_NO_FREEZE_KEY.
  public var freezeKey: Proto_Key {
    get {return _storage._freezeKey ?? Proto_Key()}
    set {_uniqueStorage()._freezeKey = newValue}
  }
  /// Returns true if `freezeKey` has been explicitly set.
  public var hasFreezeKey: Bool {return _storage._freezeKey != nil}
  /// Clears the value of `freezeKey`. Subsequent reads from it will return its default value.
  public mutating func clearFreezeKey() {_uniqueStorage()._freezeKey = nil}

  ///*
  /// The new Wipe key of the Token. If the Token does not have currently a Wipe key, transaction
  /// will resolve to TOKEN_HAS_NO_WIPE_KEY.
  public var wipeKey: Proto_Key {
    get {return _storage._wipeKey ?? Proto_Key()}
    set {_uniqueStorage()._wipeKey = newValue}
  }
  /// Returns true if `wipeKey` has been explicitly set.
  public var hasWipeKey: Bool {return _storage._wipeKey != nil}
  /// Clears the value of `wipeKey`. Subsequent reads from it will return its default value.
  public mutating func clearWipeKey() {_uniqueStorage()._wipeKey = nil}

  ///*
  /// The new Supply key of the Token. If the Token does not have currently a Supply key,
  /// transaction will resolve to TOKEN_HAS_NO_SUPPLY_KEY.
  public var supplyKey: Proto_Key {
    get {return _storage._supplyKey ?? Proto_Key()}
    set {_uniqueStorage()._supplyKey = newValue}
  }
  /// Returns true if `supplyKey` has been explicitly set.
  public var hasSupplyKey: Bool {return _storage._supplyKey != nil}
  /// Clears the value of `supplyKey`. Subsequent reads from it will return its default value.
  public mutating func clearSupplyKey() {_uniqueStorage()._supplyKey = nil}

  ///*
  /// The new account which will be automatically charged to renew the token's expiration, at
  /// autoRenewPeriod interval.
  public var autoRenewAccount: Proto_AccountID {
    get {return _storage._autoRenewAccount ?? Proto_AccountID()}
    set {_uniqueStorage()._autoRenewAccount = newValue}
  }
  /// Returns true if `autoRenewAccount` has been explicitly set.
  public var hasAutoRenewAccount: Bool {return _storage._autoRenewAccount != nil}
  /// Clears the value of `autoRenewAccount`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewAccount() {_uniqueStorage()._autoRenewAccount = nil}

  ///*
  /// The new interval at which the auto-renew account will be charged to extend the token's
  /// expiry.
  public var autoRenewPeriod: Proto_Duration {
    get {return _storage._autoRenewPeriod ?? Proto_Duration()}
    set {_uniqueStorage()._autoRenewPeriod = newValue}
  }
  /// Returns true if `autoRenewPeriod` has been explicitly set.
  public var hasAutoRenewPeriod: Bool {return _storage._autoRenewPeriod != nil}
  /// Clears the value of `autoRenewPeriod`. Subsequent reads from it will return its default value.
  public mutating func clearAutoRenewPeriod() {_uniqueStorage()._autoRenewPeriod = nil}

  ///*
  /// The new expiry time of the token. Expiry can be updated even if admin key is not set. If the
  /// provided expiry is earlier than the current token expiry, transaction wil resolve to
  /// INVALID_EXPIRATION_TIME
  public var expiry: Proto_Timestamp {
    get {return _storage._expiry ?? Proto_Timestamp()}
    set {_uniqueStorage()._expiry = newValue}
  }
  /// Returns true if `expiry` has been explicitly set.
  public var hasExpiry: Bool {return _storage._expiry != nil}
  /// Clears the value of `expiry`. Subsequent reads from it will return its default value.
  public mutating func clearExpiry() {_uniqueStorage()._expiry = nil}

  ///*
  /// If set, the new memo to be associated with the token (UTF-8 encoding max 100 bytes)
  public var memo: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._memo ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._memo = newValue}
  }
  /// Returns true if `memo` has been explicitly set.
  public var hasMemo: Bool {return _storage._memo != nil}
  /// Clears the value of `memo`. Subsequent reads from it will return its default value.
  public mutating func clearMemo() {_uniqueStorage()._memo = nil}

  ///*
  /// If set, the new key to use to update the token's custom fee schedule; if the token does not
  /// currently have this key, transaction will resolve to TOKEN_HAS_NO_FEE_SCHEDULE_KEY
  public var feeScheduleKey: Proto_Key {
    get {return _storage._feeScheduleKey ?? Proto_Key()}
    set {_uniqueStorage()._feeScheduleKey = newValue}
  }
  /// Returns true if `feeScheduleKey` has been explicitly set.
  public var hasFeeScheduleKey: Bool {return _storage._feeScheduleKey != nil}
  /// Clears the value of `feeScheduleKey`. Subsequent reads from it will return its default value.
  public mutating func clearFeeScheduleKey() {_uniqueStorage()._feeScheduleKey = nil}

  ///*
  /// The Key which can pause and unpause the Token. If the Token does not currently have a pause key,
  /// transaction will resolve to TOKEN_HAS_NO_PAUSE_KEY
  public var pauseKey: Proto_Key {
    get {return _storage._pauseKey ?? Proto_Key()}
    set {_uniqueStorage()._pauseKey = newValue}
  }
  /// Returns true if `pauseKey` has been explicitly set.
  public var hasPauseKey: Bool {return _storage._pauseKey != nil}
  /// Clears the value of `pauseKey`. Subsequent reads from it will return its default value.
  public mutating func clearPauseKey() {_uniqueStorage()._pauseKey = nil}

  ///*
  /// Metadata of the created token definition
  public var metadata: SwiftProtobuf.Google_Protobuf_BytesValue {
    get {return _storage._metadata ?? SwiftProtobuf.Google_Protobuf_BytesValue()}
    set {_uniqueStorage()._metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  public var hasMetadata: Bool {return _storage._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  public mutating func clearMetadata() {_uniqueStorage()._metadata = nil}

  ///*
  /// The key which can change the metadata of a token
  /// (token definition, partition definition, and individual NFTs).
  /// If the Token does not have currently a Metadata key,
  /// transaction will resolve to TOKEN_HAS_NO_METADATA_KEY
  public var metadataKey: Proto_Key {
    get {return _storage._metadataKey ?? Proto_Key()}
    set {_uniqueStorage()._metadataKey = newValue}
  }
  /// Returns true if `metadataKey` has been explicitly set.
  public var hasMetadataKey: Bool {return _storage._metadataKey != nil}
  /// Clears the value of `metadataKey`. Subsequent reads from it will return its default value.
  public mutating func clearMetadataKey() {_uniqueStorage()._metadataKey = nil}

  ///*
  /// Determines whether the system should check the validity of the passed keys for update.
  public var keyVerificationMode: Proto_TokenKeyValidation {
    get {return _storage._keyVerificationMode}
    set {_uniqueStorage()._keyVerificationMode = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenUpdateTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenUpdateTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "symbol"),
    3: .same(proto: "name"),
    4: .same(proto: "treasury"),
    5: .same(proto: "adminKey"),
    6: .same(proto: "kycKey"),
    7: .same(proto: "freezeKey"),
    8: .same(proto: "wipeKey"),
    9: .same(proto: "supplyKey"),
    10: .same(proto: "autoRenewAccount"),
    11: .same(proto: "autoRenewPeriod"),
    12: .same(proto: "expiry"),
    13: .same(proto: "memo"),
    14: .standard(proto: "fee_schedule_key"),
    15: .standard(proto: "pause_key"),
    16: .same(proto: "metadata"),
    17: .standard(proto: "metadata_key"),
    18: .standard(proto: "key_verification_mode"),
  ]

  fileprivate class _StorageClass {
    var _token: Proto_TokenID? = nil
    var _symbol: String = String()
    var _name: String = String()
    var _treasury: Proto_AccountID? = nil
    var _adminKey: Proto_Key? = nil
    var _kycKey: Proto_Key? = nil
    var _freezeKey: Proto_Key? = nil
    var _wipeKey: Proto_Key? = nil
    var _supplyKey: Proto_Key? = nil
    var _autoRenewAccount: Proto_AccountID? = nil
    var _autoRenewPeriod: Proto_Duration? = nil
    var _expiry: Proto_Timestamp? = nil
    var _memo: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _feeScheduleKey: Proto_Key? = nil
    var _pauseKey: Proto_Key? = nil
    var _metadata: SwiftProtobuf.Google_Protobuf_BytesValue? = nil
    var _metadataKey: Proto_Key? = nil
    var _keyVerificationMode: Proto_TokenKeyValidation = .fullValidation

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _token = source._token
      _symbol = source._symbol
      _name = source._name
      _treasury = source._treasury
      _adminKey = source._adminKey
      _kycKey = source._kycKey
      _freezeKey = source._freezeKey
      _wipeKey = source._wipeKey
      _supplyKey = source._supplyKey
      _autoRenewAccount = source._autoRenewAccount
      _autoRenewPeriod = source._autoRenewPeriod
      _expiry = source._expiry
      _memo = source._memo
      _feeScheduleKey = source._feeScheduleKey
      _pauseKey = source._pauseKey
      _metadata = source._metadata
      _metadataKey = source._metadataKey
      _keyVerificationMode = source._keyVerificationMode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._token) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._symbol) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._treasury) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._adminKey) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._kycKey) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._freezeKey) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._wipeKey) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._supplyKey) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewAccount) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._autoRenewPeriod) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._expiry) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._memo) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._feeScheduleKey) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._pauseKey) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._metadata) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._metadataKey) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._keyVerificationMode) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._token {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._symbol.isEmpty {
        try visitor.visitSingularStringField(value: _storage._symbol, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      try { if let v = _storage._treasury {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._adminKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._kycKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._freezeKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._wipeKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._supplyKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._autoRenewAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._autoRenewPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._expiry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._memo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._feeScheduleKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._pauseKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._metadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._metadataKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if _storage._keyVerificationMode != .fullValidation {
        try visitor.visitSingularEnumField(value: _storage._keyVerificationMode, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenUpdateTransactionBody, rhs: Proto_TokenUpdateTransactionBody) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._token != rhs_storage._token {return false}
        if _storage._symbol != rhs_storage._symbol {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._treasury != rhs_storage._treasury {return false}
        if _storage._adminKey != rhs_storage._adminKey {return false}
        if _storage._kycKey != rhs_storage._kycKey {return false}
        if _storage._freezeKey != rhs_storage._freezeKey {return false}
        if _storage._wipeKey != rhs_storage._wipeKey {return false}
        if _storage._supplyKey != rhs_storage._supplyKey {return false}
        if _storage._autoRenewAccount != rhs_storage._autoRenewAccount {return false}
        if _storage._autoRenewPeriod != rhs_storage._autoRenewPeriod {return false}
        if _storage._expiry != rhs_storage._expiry {return false}
        if _storage._memo != rhs_storage._memo {return false}
        if _storage._feeScheduleKey != rhs_storage._feeScheduleKey {return false}
        if _storage._pauseKey != rhs_storage._pauseKey {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._metadataKey != rhs_storage._metadataKey {return false}
        if _storage._keyVerificationMode != rhs_storage._keyVerificationMode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
