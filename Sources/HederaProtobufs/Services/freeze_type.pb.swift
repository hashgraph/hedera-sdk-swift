// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: freeze_type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// The type of network freeze or upgrade operation to be performed. This type dictates which 
/// fields are required. 
public enum Proto_FreezeType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///*
  /// An (invalid) default value for this enum, to ensure the client explicitly sets 
  /// the intended type of freeze transaction.
  case unknownFreezeType // = 0

  ///*
  /// Freezes the network at the specified time. The start_time field must be provided and 
  /// must reference a future time. Any values specified for the update_file and file_hash 
  /// fields will be ignored. This transaction does not perform any network changes or 
  /// upgrades and requires manual intervention to restart the network. 
  case freezeOnly // = 1

  ///*
  /// A non-freezing operation that initiates network wide preparation in advance of a 
  /// scheduled freeze upgrade. The update_file and file_hash fields must be provided and 
  /// valid. The start_time field may be omitted and any value present will be ignored.
  case prepareUpgrade // = 2

  ///*
  /// Freezes the network at the specified time and performs the previously prepared 
  /// automatic upgrade across the entire network. 
  case freezeUpgrade // = 3

  ///*
  /// Aborts a pending network freeze operation.
  case freezeAbort // = 4

  ///*
  /// Performs an immediate upgrade on auxilary services and containers providing 
  /// telemetry/metrics. Does not impact network operations. 
  case telemetryUpgrade // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownFreezeType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownFreezeType
    case 1: self = .freezeOnly
    case 2: self = .prepareUpgrade
    case 3: self = .freezeUpgrade
    case 4: self = .freezeAbort
    case 5: self = .telemetryUpgrade
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownFreezeType: return 0
    case .freezeOnly: return 1
    case .prepareUpgrade: return 2
    case .freezeUpgrade: return 3
    case .freezeAbort: return 4
    case .telemetryUpgrade: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Proto_FreezeType] = [
    .unknownFreezeType,
    .freezeOnly,
    .prepareUpgrade,
    .freezeUpgrade,
    .freezeAbort,
    .telemetryUpgrade,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Proto_FreezeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_FREEZE_TYPE"),
    1: .same(proto: "FREEZE_ONLY"),
    2: .same(proto: "PREPARE_UPGRADE"),
    3: .same(proto: "FREEZE_UPGRADE"),
    4: .same(proto: "FREEZE_ABORT"),
    5: .same(proto: "TELEMETRY_UPGRADE"),
  ]
}
