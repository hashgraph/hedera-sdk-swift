// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crypto_get_account_balance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Get the balance of a cryptocurrency account. This returns only the balance, so it is a smaller
/// reply than CryptoGetInfo, which returns the balance plus additional information.
public struct Proto_CryptoGetAccountBalanceQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Standard info sent from client to node, including the signed payment, and what kind of
  /// response is requested (cost, state proof, both, or neither).
  public var header: Proto_QueryHeader {
    get {return _header ?? Proto_QueryHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  public var balanceSource: Proto_CryptoGetAccountBalanceQuery.OneOf_BalanceSource? = nil

  ///*
  /// The account ID for which information is requested
  public var accountID: Proto_AccountID {
    get {
      if case .accountID(let v)? = balanceSource {return v}
      return Proto_AccountID()
    }
    set {balanceSource = .accountID(newValue)}
  }

  ///*
  /// The account ID for which information is requested
  public var contractID: Proto_ContractID {
    get {
      if case .contractID(let v)? = balanceSource {return v}
      return Proto_ContractID()
    }
    set {balanceSource = .contractID(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_BalanceSource: Equatable {
    ///*
    /// The account ID for which information is requested
    case accountID(Proto_AccountID)
    ///*
    /// The account ID for which information is requested
    case contractID(Proto_ContractID)

  #if !swift(>=4.1)
    public static func ==(lhs: Proto_CryptoGetAccountBalanceQuery.OneOf_BalanceSource, rhs: Proto_CryptoGetAccountBalanceQuery.OneOf_BalanceSource) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.accountID, .accountID): return {
        guard case .accountID(let l) = lhs, case .accountID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contractID, .contractID): return {
        guard case .contractID(let l) = lhs, case .contractID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _header: Proto_QueryHeader? = nil
}

///*
/// Response when the client sends the node CryptoGetAccountBalanceQuery
public struct Proto_CryptoGetAccountBalanceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Standard response from node to client, including the requested fields: cost, or state proof,
  /// or both, or neither.
  public var header: Proto_ResponseHeader {
    get {return _header ?? Proto_ResponseHeader()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  public var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  public mutating func clearHeader() {self._header = nil}

  ///*
  /// The account ID that is being described (this is useful with state proofs, for proving to a
  /// third party)
  public var accountID: Proto_AccountID {
    get {return _accountID ?? Proto_AccountID()}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {self._accountID = nil}

  ///*
  /// The current balance, in tinybars.
  public var balance: UInt64 = 0

  ///*
  /// [DEPRECATED] The balances of the tokens associated to the account. This field was
  /// deprecated by <a href="https://hips.hedera.com/hip/hip-367">HIP-367</a>, which allowed
  /// an account to be associated to an unlimited number of tokens. This scale makes it more
  /// efficient for users to consult mirror nodes to review their token balances.
  public var tokenBalances: [Proto_TokenBalance] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _header: Proto_ResponseHeader? = nil
  fileprivate var _accountID: Proto_AccountID? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_CryptoGetAccountBalanceQuery: @unchecked Sendable {}
extension Proto_CryptoGetAccountBalanceQuery.OneOf_BalanceSource: @unchecked Sendable {}
extension Proto_CryptoGetAccountBalanceResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoGetAccountBalanceQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoGetAccountBalanceQuery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "accountID"),
    3: .same(proto: "contractID"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try {
        var v: Proto_AccountID?
        var hadOneofValue = false
        if let current = self.balanceSource {
          hadOneofValue = true
          if case .accountID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.balanceSource = .accountID(v)
        }
      }()
      case 3: try {
        var v: Proto_ContractID?
        var hadOneofValue = false
        if let current = self.balanceSource {
          hadOneofValue = true
          if case .contractID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.balanceSource = .contractID(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.balanceSource {
    case .accountID?: try {
      guard case .accountID(let v)? = self.balanceSource else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .contractID?: try {
      guard case .contractID(let v)? = self.balanceSource else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoGetAccountBalanceQuery, rhs: Proto_CryptoGetAccountBalanceQuery) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.balanceSource != rhs.balanceSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CryptoGetAccountBalanceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoGetAccountBalanceResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "accountID"),
    3: .same(proto: "balance"),
    4: .same(proto: "tokenBalances"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._accountID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.balance) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.tokenBalances) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._accountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.balance != 0 {
      try visitor.visitSingularUInt64Field(value: self.balance, fieldNumber: 3)
    }
    if !self.tokenBalances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenBalances, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoGetAccountBalanceResponse, rhs: Proto_CryptoGetAccountBalanceResponse) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs._accountID != rhs._accountID {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.tokenBalances != rhs.tokenBalances {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
