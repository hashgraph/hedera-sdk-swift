// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crypto_approve_allowance.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Creates one or more hbar/token approved allowances <b>relative to the owner account specified in the allowances of
/// this transaction</b>. Each allowance grants a spender the right to transfer a pre-determined amount of the owner's
/// hbar/token to any other account of the spender's choice. If the owner is not specified in any allowance, the payer
/// of transaction is considered to be the owner for that particular allowance.
/// Setting the amount to zero in CryptoAllowance or TokenAllowance will remove the respective allowance for the spender.
///
/// (So if account <tt>0.0.X</tt> pays for this transaction and owner is not specified in the allowance,
/// then at consensus each spender account will have new allowances to spend hbar or tokens from <tt>0.0.X</tt>).
public struct Proto_CryptoApproveAllowanceTransactionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// List of hbar allowances approved by the account owner.
  public var cryptoAllowances: [Proto_CryptoAllowance] = []

  ///*
  /// List of non-fungible token allowances approved by the account owner.
  public var nftAllowances: [Proto_NftAllowance] = []

  ///*
  /// List of fungible token allowances approved by the account owner.
  public var tokenAllowances: [Proto_TokenAllowance] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// An approved allowance of hbar transfers for a spender.
public struct Proto_CryptoAllowance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The account ID of the hbar owner (ie. the grantor of the allowance).
  public var owner: Proto_AccountID {
    get {return _owner ?? Proto_AccountID()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///*
  /// The account ID of the spender of the hbar allowance.
  public var spender: Proto_AccountID {
    get {return _spender ?? Proto_AccountID()}
    set {_spender = newValue}
  }
  /// Returns true if `spender` has been explicitly set.
  public var hasSpender: Bool {return self._spender != nil}
  /// Clears the value of `spender`. Subsequent reads from it will return its default value.
  public mutating func clearSpender() {self._spender = nil}

  ///*
  /// The amount of the spender's allowance in tinybars.
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _owner: Proto_AccountID? = nil
  fileprivate var _spender: Proto_AccountID? = nil
}

///*
/// An approved allowance of non-fungible token transfers for a spender.
public struct Proto_NftAllowance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The NFT token type that the allowance pertains to.
  public var tokenID: Proto_TokenID {
    get {return _tokenID ?? Proto_TokenID()}
    set {_tokenID = newValue}
  }
  /// Returns true if `tokenID` has been explicitly set.
  public var hasTokenID: Bool {return self._tokenID != nil}
  /// Clears the value of `tokenID`. Subsequent reads from it will return its default value.
  public mutating func clearTokenID() {self._tokenID = nil}

  ///*
  /// The account ID of the token owner (ie. the grantor of the allowance).
  public var owner: Proto_AccountID {
    get {return _owner ?? Proto_AccountID()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///*
  /// The account ID of the token allowance spender.
  public var spender: Proto_AccountID {
    get {return _spender ?? Proto_AccountID()}
    set {_spender = newValue}
  }
  /// Returns true if `spender` has been explicitly set.
  public var hasSpender: Bool {return self._spender != nil}
  /// Clears the value of `spender`. Subsequent reads from it will return its default value.
  public mutating func clearSpender() {self._spender = nil}

  ///*
  /// The list of serial numbers that the spender is permitted to transfer.
  public var serialNumbers: [Int64] = []

  ///*
  /// If true, the spender has access to all of the owner's NFT units of type tokenId (currently
  /// owned and any in the future).
  public var approvedForAll: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _approvedForAll ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_approvedForAll = newValue}
  }
  /// Returns true if `approvedForAll` has been explicitly set.
  public var hasApprovedForAll: Bool {return self._approvedForAll != nil}
  /// Clears the value of `approvedForAll`. Subsequent reads from it will return its default value.
  public mutating func clearApprovedForAll() {self._approvedForAll = nil}

  ///*
  /// The account ID of the spender who is granted approvedForAll allowance and granting
  /// approval on an NFT serial to another spender.
  public var delegatingSpender: Proto_AccountID {
    get {return _delegatingSpender ?? Proto_AccountID()}
    set {_delegatingSpender = newValue}
  }
  /// Returns true if `delegatingSpender` has been explicitly set.
  public var hasDelegatingSpender: Bool {return self._delegatingSpender != nil}
  /// Clears the value of `delegatingSpender`. Subsequent reads from it will return its default value.
  public mutating func clearDelegatingSpender() {self._delegatingSpender = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenID: Proto_TokenID? = nil
  fileprivate var _owner: Proto_AccountID? = nil
  fileprivate var _spender: Proto_AccountID? = nil
  fileprivate var _approvedForAll: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _delegatingSpender: Proto_AccountID? = nil
}

///*
/// An approved allowance of fungible token transfers for a spender.
public struct Proto_TokenAllowance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The token that the allowance pertains to.
  public var tokenID: Proto_TokenID {
    get {return _tokenID ?? Proto_TokenID()}
    set {_tokenID = newValue}
  }
  /// Returns true if `tokenID` has been explicitly set.
  public var hasTokenID: Bool {return self._tokenID != nil}
  /// Clears the value of `tokenID`. Subsequent reads from it will return its default value.
  public mutating func clearTokenID() {self._tokenID = nil}

  ///*
  /// The account ID of the token owner (ie. the grantor of the allowance).
  public var owner: Proto_AccountID {
    get {return _owner ?? Proto_AccountID()}
    set {_owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return self._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {self._owner = nil}

  ///*
  /// The account ID of the token allowance spender.
  public var spender: Proto_AccountID {
    get {return _spender ?? Proto_AccountID()}
    set {_spender = newValue}
  }
  /// Returns true if `spender` has been explicitly set.
  public var hasSpender: Bool {return self._spender != nil}
  /// Clears the value of `spender`. Subsequent reads from it will return its default value.
  public mutating func clearSpender() {self._spender = nil}

  ///*
  /// The amount of the spender's token allowance.
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenID: Proto_TokenID? = nil
  fileprivate var _owner: Proto_AccountID? = nil
  fileprivate var _spender: Proto_AccountID? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_CryptoApproveAllowanceTransactionBody: @unchecked Sendable {}
extension Proto_CryptoAllowance: @unchecked Sendable {}
extension Proto_NftAllowance: @unchecked Sendable {}
extension Proto_TokenAllowance: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_CryptoApproveAllowanceTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoApproveAllowanceTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cryptoAllowances"),
    2: .same(proto: "nftAllowances"),
    3: .same(proto: "tokenAllowances"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.cryptoAllowances) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.nftAllowances) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tokenAllowances) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cryptoAllowances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cryptoAllowances, fieldNumber: 1)
    }
    if !self.nftAllowances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nftAllowances, fieldNumber: 2)
    }
    if !self.tokenAllowances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokenAllowances, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoApproveAllowanceTransactionBody, rhs: Proto_CryptoApproveAllowanceTransactionBody) -> Bool {
    if lhs.cryptoAllowances != rhs.cryptoAllowances {return false}
    if lhs.nftAllowances != rhs.nftAllowances {return false}
    if lhs.tokenAllowances != rhs.tokenAllowances {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CryptoAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CryptoAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .same(proto: "spender"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._spender) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._spender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CryptoAllowance, rhs: Proto_CryptoAllowance) -> Bool {
    if lhs._owner != rhs._owner {return false}
    if lhs._spender != rhs._spender {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_NftAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NftAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenId"),
    2: .same(proto: "owner"),
    3: .same(proto: "spender"),
    4: .standard(proto: "serial_numbers"),
    5: .standard(proto: "approved_for_all"),
    6: .standard(proto: "delegating_spender"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._spender) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.serialNumbers) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._approvedForAll) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._delegatingSpender) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._spender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.serialNumbers.isEmpty {
      try visitor.visitPackedInt64Field(value: self.serialNumbers, fieldNumber: 4)
    }
    try { if let v = self._approvedForAll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._delegatingSpender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_NftAllowance, rhs: Proto_NftAllowance) -> Bool {
    if lhs._tokenID != rhs._tokenID {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs._spender != rhs._spender {return false}
    if lhs.serialNumbers != rhs.serialNumbers {return false}
    if lhs._approvedForAll != rhs._approvedForAll {return false}
    if lhs._delegatingSpender != rhs._delegatingSpender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TokenAllowance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenAllowance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokenId"),
    2: .same(proto: "owner"),
    3: .same(proto: "spender"),
    4: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._owner) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._spender) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._owner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._spender {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenAllowance, rhs: Proto_TokenAllowance) -> Bool {
    if lhs._tokenID != rhs._tokenID {return false}
    if lhs._owner != rhs._owner {return false}
    if lhs._spender != rhs._spender {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
