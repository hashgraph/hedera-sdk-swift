// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/addressbook/node.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A single address book node in the network state.
///
/// Each node in the network address book SHALL represent a single actual
/// consensus node that is eligible to participate in network consensus.
///
/// Address book nodes SHALL NOT be _globally_ uniquely identified. A given node
/// is only valid within a single realm and shard combination, so the identifier
/// for a network node SHALL only be unique within a single realm and shard
/// combination.
public struct Com_Hedera_Hapi_Node_State_Addressbook_Node: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A consensus node identifier.
  /// <p>
  /// Node identifiers SHALL be unique _within_ a shard and realm,
  /// but a node SHALL NOT, ever, serve multiple shards or realms,
  /// therefore the node identifier MAY be repeated _between_ shards and realms.
  public var nodeID: UInt64 = 0

  ///*
  /// An account identifier.
  /// <p>
  /// This account SHALL be owned by the entity responsible for the node.<br/>
  /// This account SHALL be charged transaction fees for any transactions that
  /// are submitted to the network by this node and fail due diligence checks.
  public var accountID: Proto_AccountID {
    get {return _accountID ?? Proto_AccountID()}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {self._accountID = nil}

  ///*
  /// A short description of the node.
  /// <p>
  /// This value, if set, SHALL NOT exceed 100 bytes when encoded as UTF-8.
  public var description_p: String = String()

  ///*
  /// A list of service endpoints for gossip.
  /// <p>
  /// These endpoints SHALL represent the published endpoints to which other
  /// consensus nodes may _gossip_ transactions.<br/>
  /// If the network configuration value `gossipFqdnRestricted` is set, then
  /// all endpoints in this list SHALL supply only IP address.<br/>
  /// If the network configuration value `gossipFqdnRestricted` is _not_ set,
  /// then endpoints in this list MAY supply either IP address or FQDN, but
  /// SHALL NOT supply both values for the same endpoint.<br/>
  /// This list SHALL NOT be empty.<br/>
  /// This list SHALL NOT contain more than `10` entries.<br/>
  /// The first two entries in this list SHALL be the endpoints published to
  /// all consensus nodes.<br/>
  /// All other entries SHALL be reserved for future use.
  public var gossipEndpoint: [Proto_ServiceEndpoint] = []

  ///*
  /// A list of service endpoints for gRPC calls.
  /// <p>
  /// These endpoints SHALL represent the published endpoints to which clients
  /// may submit transactions.<br/>
  /// These endpoints SHALL specify a port.<br/>
  /// Endpoints in this list MAY supply either IP address or FQDN, but SHALL
  /// NOT supply both values for the same endpoint.<br/>
  /// This list SHALL NOT be empty.<br/>
  /// This list SHALL NOT contain more than `8` entries.
  public var serviceEndpoint: [Proto_ServiceEndpoint] = []

  ///*
  /// A certificate used to sign gossip events.
  /// <p>
  /// This value SHALL be a certificate of a type permitted for gossip
  /// signatures.<br/>
  /// This value SHALL be the DER encoding of the certificate presented.<br/>
  /// This field is REQUIRED and MUST NOT be empty.
  public var gossipCaCertificate: Data = Data()

  ///*
  /// A hash of the node gRPC certificate.
  /// <p>
  /// This value MAY be used to verify the certificate presented by the node
  /// during TLS negotiation for gRPC.<br/>
  /// This value SHALL be a SHA-384 hash.<br/>
  /// The TLS certificate to be hashed SHALL first be in PEM format and SHALL
  /// be encoded with UTF-8 NFKD encoding to a stream of bytes provided to
  /// the hash algorithm.<br/>
  /// This field is OPTIONAL.
  public var grpcCertificateHash: Data = Data()

  ///*
  /// A consensus weight.
  /// <p>
  /// Each node SHALL have a weight in consensus calculations.<br/>
  /// The consensus weight of a node SHALL be calculated based on the amount
  /// of HBAR staked to that node.<br/>
  /// Consensus SHALL be calculated based on agreement of greater than `2/3`
  /// of the total `weight` value of all nodes on the network.
  public var weight: UInt64 = 0

  ///*
  /// A flag indicating this node is deleted.
  /// <p>
  /// If this field is set, then this node SHALL NOT be included in the next
  /// update of the network address book.<br/>
  /// If this field is set, then this node SHALL be immutable and SHALL NOT
  /// be modified.<br/>
  /// If this field is set, then any `nodeUpdate` transaction to modify this
  /// node SHALL fail.
  public var deleted: Bool = false

  ///*
  /// An administrative key controlled by the node operator.
  /// <p>
  /// This key MUST sign each transaction to update this node.<br/>
  /// This field MUST contain a valid `Key` value.<br/>
  /// This field is REQUIRED and MUST NOT be set to an empty `KeyList`.
  public var adminKey: Proto_Key {
    get {return _adminKey ?? Proto_Key()}
    set {_adminKey = newValue}
  }
  /// Returns true if `adminKey` has been explicitly set.
  public var hasAdminKey: Bool {return self._adminKey != nil}
  /// Clears the value of `adminKey`. Subsequent reads from it will return its default value.
  public mutating func clearAdminKey() {self._adminKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _accountID: Proto_AccountID? = nil
  fileprivate var _adminKey: Proto_Key? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.hedera.hapi.node.state.addressbook"

extension Com_Hedera_Hapi_Node_State_Addressbook_Node: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Node"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .standard(proto: "account_id"),
    3: .same(proto: "description"),
    4: .standard(proto: "gossip_endpoint"),
    5: .standard(proto: "service_endpoint"),
    6: .standard(proto: "gossip_ca_certificate"),
    7: .standard(proto: "grpc_certificate_hash"),
    8: .same(proto: "weight"),
    9: .same(proto: "deleted"),
    10: .standard(proto: "admin_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._accountID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.gossipEndpoint) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.serviceEndpoint) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.gossipCaCertificate) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.grpcCertificateHash) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.weight) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.deleted) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._adminKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.nodeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nodeID, fieldNumber: 1)
    }
    try { if let v = self._accountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if !self.gossipEndpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gossipEndpoint, fieldNumber: 4)
    }
    if !self.serviceEndpoint.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.serviceEndpoint, fieldNumber: 5)
    }
    if !self.gossipCaCertificate.isEmpty {
      try visitor.visitSingularBytesField(value: self.gossipCaCertificate, fieldNumber: 6)
    }
    if !self.grpcCertificateHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.grpcCertificateHash, fieldNumber: 7)
    }
    if self.weight != 0 {
      try visitor.visitSingularUInt64Field(value: self.weight, fieldNumber: 8)
    }
    if self.deleted != false {
      try visitor.visitSingularBoolField(value: self.deleted, fieldNumber: 9)
    }
    try { if let v = self._adminKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Addressbook_Node, rhs: Com_Hedera_Hapi_Node_State_Addressbook_Node) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs._accountID != rhs._accountID {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.gossipEndpoint != rhs.gossipEndpoint {return false}
    if lhs.serviceEndpoint != rhs.serviceEndpoint {return false}
    if lhs.gossipCaCertificate != rhs.gossipCaCertificate {return false}
    if lhs.grpcCertificateHash != rhs.grpcCertificateHash {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.deleted != rhs.deleted {return false}
    if lhs._adminKey != rhs._adminKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
