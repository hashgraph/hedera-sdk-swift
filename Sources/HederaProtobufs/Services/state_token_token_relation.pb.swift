// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/token/token_relation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Representation of a Hedera Token Service token relationship entity in the network Merkle tree.
///
/// As with all network entities, a token relationship has a unique entity number pair, which is represented
/// with the account and the token involved in the relationship.
public struct Proto_TokenRelation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The token involved in this relation.It takes only positive
  public var tokenID: Proto_TokenID {
    get {return _tokenID ?? Proto_TokenID()}
    set {_tokenID = newValue}
  }
  /// Returns true if `tokenID` has been explicitly set.
  public var hasTokenID: Bool {return self._tokenID != nil}
  /// Clears the value of `tokenID`. Subsequent reads from it will return its default value.
  public mutating func clearTokenID() {self._tokenID = nil}

  ///*
  /// The account involved in this association.
  public var accountID: Proto_AccountID {
    get {return _accountID ?? Proto_AccountID()}
    set {_accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return self._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {self._accountID = nil}

  ///*
  /// The balance of the token relationship.
  public var balance: Int64 = 0

  ///*
  /// The flags specifying the token relationship is frozen or not.
  public var frozen: Bool = false

  ///*
  /// The flag indicating if the token relationship has been granted KYC.
  public var kycGranted: Bool = false

  ///*
  /// The flag indicating if the token relationship was created using automatic association.
  public var automaticAssociation: Bool = false

  ///*
  /// The previous token id of account's association linked list
  public var previousToken: Proto_TokenID {
    get {return _previousToken ?? Proto_TokenID()}
    set {_previousToken = newValue}
  }
  /// Returns true if `previousToken` has been explicitly set.
  public var hasPreviousToken: Bool {return self._previousToken != nil}
  /// Clears the value of `previousToken`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousToken() {self._previousToken = nil}

  ///*
  /// The next token id of account's association linked list
  public var nextToken: Proto_TokenID {
    get {return _nextToken ?? Proto_TokenID()}
    set {_nextToken = newValue}
  }
  /// Returns true if `nextToken` has been explicitly set.
  public var hasNextToken: Bool {return self._nextToken != nil}
  /// Clears the value of `nextToken`. Subsequent reads from it will return its default value.
  public mutating func clearNextToken() {self._nextToken = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _tokenID: Proto_TokenID? = nil
  fileprivate var _accountID: Proto_AccountID? = nil
  fileprivate var _previousToken: Proto_TokenID? = nil
  fileprivate var _nextToken: Proto_TokenID? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenRelation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenRelation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_id"),
    2: .standard(proto: "account_id"),
    3: .same(proto: "balance"),
    4: .same(proto: "frozen"),
    5: .standard(proto: "kyc_granted"),
    6: .standard(proto: "automatic_association"),
    7: .standard(proto: "previous_token"),
    8: .standard(proto: "next_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tokenID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._accountID) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.balance) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.frozen) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.kycGranted) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.automaticAssociation) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._previousToken) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._nextToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._accountID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.balance != 0 {
      try visitor.visitSingularInt64Field(value: self.balance, fieldNumber: 3)
    }
    if self.frozen != false {
      try visitor.visitSingularBoolField(value: self.frozen, fieldNumber: 4)
    }
    if self.kycGranted != false {
      try visitor.visitSingularBoolField(value: self.kycGranted, fieldNumber: 5)
    }
    if self.automaticAssociation != false {
      try visitor.visitSingularBoolField(value: self.automaticAssociation, fieldNumber: 6)
    }
    try { if let v = self._previousToken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._nextToken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenRelation, rhs: Proto_TokenRelation) -> Bool {
    if lhs._tokenID != rhs._tokenID {return false}
    if lhs._accountID != rhs._accountID {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.frozen != rhs.frozen {return false}
    if lhs.kycGranted != rhs.kycGranted {return false}
    if lhs.automaticAssociation != rhs.automaticAssociation {return false}
    if lhs._previousToken != rhs._previousToken {return false}
    if lhs._nextToken != rhs._nextToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
