// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: system_undelete.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Undelete a file or smart contract that was deleted by SystemDelete; requires a Hedera
/// administrative multisignature.
public struct Proto_SystemUndeleteTransactionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Proto_SystemUndeleteTransactionBody.OneOf_ID? = nil

  ///*
  /// The file ID to undelete, in the format used in transactions
  public var fileID: Proto_FileID {
    get {
      if case .fileID(let v)? = id {return v}
      return Proto_FileID()
    }
    set {id = .fileID(newValue)}
  }

  ///*
  /// The contract ID instance to undelete, in the format used in transactions
  public var contractID: Proto_ContractID {
    get {
      if case .contractID(let v)? = id {return v}
      return Proto_ContractID()
    }
    set {id = .contractID(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_ID: Equatable {
    ///*
    /// The file ID to undelete, in the format used in transactions
    case fileID(Proto_FileID)
    ///*
    /// The contract ID instance to undelete, in the format used in transactions
    case contractID(Proto_ContractID)

  #if !swift(>=4.1)
    public static func ==(lhs: Proto_SystemUndeleteTransactionBody.OneOf_ID, rhs: Proto_SystemUndeleteTransactionBody.OneOf_ID) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.fileID, .fileID): return {
        guard case .fileID(let l) = lhs, case .fileID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.contractID, .contractID): return {
        guard case .contractID(let l) = lhs, case .contractID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_SystemUndeleteTransactionBody: @unchecked Sendable {}
extension Proto_SystemUndeleteTransactionBody.OneOf_ID: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_SystemUndeleteTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SystemUndeleteTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fileID"),
    2: .same(proto: "contractID"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Proto_FileID?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .fileID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .fileID(v)
        }
      }()
      case 2: try {
        var v: Proto_ContractID?
        var hadOneofValue = false
        if let current = self.id {
          hadOneofValue = true
          if case .contractID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.id = .contractID(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.id {
    case .fileID?: try {
      guard case .fileID(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .contractID?: try {
      guard case .contractID(let v)? = self.id else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_SystemUndeleteTransactionBody, rhs: Proto_SystemUndeleteTransactionBody) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
