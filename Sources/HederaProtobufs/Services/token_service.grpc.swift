//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: token_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// Transactions and queries for the Token Service
///
/// Usage: instantiate `Proto_TokenServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_TokenServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? { get }

  func createToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func updateToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func mintToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func burnToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func wipeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func freezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func unfreezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func grantKycToTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func revokeKycFromTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func associateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func dissociateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func updateTokenFeeSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func getTokenInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getAccountNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTokenNftInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTokenNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func pauseToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func unpauseToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

extension Proto_TokenServiceClientProtocol {
  public var serviceName: String {
    return "proto.TokenService"
  }

  ///*
  /// Creates a new Token by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to createToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.createToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateTokenInterceptors() ?? []
    )
  }

  ///*
  /// Updates the account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to updateToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.updateToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateTokenInterceptors() ?? []
    )
  }

  ///*
  /// Mints an amount of the token to the defined treasury account
  ///
  /// - Parameters:
  ///   - request: Request to send to mintToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func mintToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.mintToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makemintTokenInterceptors() ?? []
    )
  }

  ///*
  /// Burns an amount of the token from the defined treasury account
  ///
  /// - Parameters:
  ///   - request: Request to send to burnToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func burnToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.burnToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeburnTokenInterceptors() ?? []
    )
  }

  ///*
  /// Deletes a Token
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.deleteToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteTokenInterceptors() ?? []
    )
  }

  ///*
  /// Wipes the provided amount of tokens from the specified Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to wipeTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func wipeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.wipeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewipeTokenAccountInterceptors() ?? []
    )
  }

  ///*
  /// Freezes the transfer of tokens to or from the specified Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to freezeTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func freezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.freezeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefreezeTokenAccountInterceptors() ?? []
    )
  }

  ///*
  /// Unfreezes the transfer of tokens to or from the specified Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to unfreezeTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unfreezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.unfreezeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunfreezeTokenAccountInterceptors() ?? []
    )
  }

  ///*
  /// Flags the provided Account ID as having gone through KYC
  ///
  /// - Parameters:
  ///   - request: Request to send to grantKycToTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func grantKycToTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.grantKycToTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegrantKycToTokenAccountInterceptors() ?? []
    )
  }

  ///*
  /// Removes the KYC flag of the provided Account ID
  ///
  /// - Parameters:
  ///   - request: Request to send to revokeKycFromTokenAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func revokeKycFromTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.revokeKycFromTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makerevokeKycFromTokenAccountInterceptors() ?? []
    )
  }

  ///*
  /// Associates tokens to an account
  ///
  /// - Parameters:
  ///   - request: Request to send to associateTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func associateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.associateTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeassociateTokensInterceptors() ?? []
    )
  }

  ///*
  /// Dissociates tokens from an account
  ///
  /// - Parameters:
  ///   - request: Request to send to dissociateTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func dissociateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.dissociateTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedissociateTokensInterceptors() ?? []
    )
  }

  ///*
  /// Updates the custom fee schedule on a token
  ///
  /// - Parameters:
  ///   - request: Request to send to updateTokenFeeSchedule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateTokenFeeSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.updateTokenFeeSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateTokenFeeScheduleInterceptors() ?? []
    )
  }

  ///*
  /// Retrieves the metadata of a token
  ///
  /// - Parameters:
  ///   - request: Request to send to getTokenInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenInfoInterceptors() ?? []
    )
  }

  ///*
  /// (DEPRECATED) Gets info on NFTs N through M on the list of NFTs associated with a given account
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountNftInfos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccountNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getAccountNftInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountNftInfosInterceptors() ?? []
    )
  }

  ///*
  /// Retrieves the metadata of an NFT by TokenID and serial number
  ///
  /// - Parameters:
  ///   - request: Request to send to getTokenNftInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenNftInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenNftInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfoInterceptors() ?? []
    )
  }

  ///*
  /// (DEPRECATED) Gets info on NFTs N through M on the list of NFTs associated with a given Token of type NON_FUNGIBLE
  ///
  /// - Parameters:
  ///   - request: Request to send to getTokenNftInfos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTokenNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenNftInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfosInterceptors() ?? []
    )
  }

  /// Pause the token
  ///
  /// - Parameters:
  ///   - request: Request to send to pauseToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pauseToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.pauseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepauseTokenInterceptors() ?? []
    )
  }

  ///  Unpause the token
  ///
  /// - Parameters:
  ///   - request: Request to send to unpauseToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unpauseToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.unpauseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunpauseTokenInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_TokenServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_TokenServiceNIOClient")
public final class Proto_TokenServiceClient: Proto_TokenServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.TokenService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Proto_TokenServiceNIOClient: Proto_TokenServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.TokenService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Transactions and queries for the Token Service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_TokenServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeUpdateTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeMintTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeBurnTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDeleteTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeWipeTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeFreezeTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeUnfreezeTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeGrantKycToTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeRevokeKycFromTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeAssociateTokensCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDissociateTokensCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeUpdateTokenFeeScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeGetTokenInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetAccountNftInfosCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetTokenNftInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetTokenNftInfosCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makePauseTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeUnpauseTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_TokenServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_TokenServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.createToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateTokenInterceptors() ?? []
    )
  }

  public func makeUpdateTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.updateToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateTokenInterceptors() ?? []
    )
  }

  public func makeMintTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.mintToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makemintTokenInterceptors() ?? []
    )
  }

  public func makeBurnTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.burnToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeburnTokenInterceptors() ?? []
    )
  }

  public func makeDeleteTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.deleteToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteTokenInterceptors() ?? []
    )
  }

  public func makeWipeTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.wipeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewipeTokenAccountInterceptors() ?? []
    )
  }

  public func makeFreezeTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.freezeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefreezeTokenAccountInterceptors() ?? []
    )
  }

  public func makeUnfreezeTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.unfreezeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunfreezeTokenAccountInterceptors() ?? []
    )
  }

  public func makeGrantKycToTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.grantKycToTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegrantKycToTokenAccountInterceptors() ?? []
    )
  }

  public func makeRevokeKycFromTokenAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.revokeKycFromTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makerevokeKycFromTokenAccountInterceptors() ?? []
    )
  }

  public func makeAssociateTokensCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.associateTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeassociateTokensInterceptors() ?? []
    )
  }

  public func makeDissociateTokensCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.dissociateTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedissociateTokensInterceptors() ?? []
    )
  }

  public func makeUpdateTokenFeeScheduleCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.updateTokenFeeSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateTokenFeeScheduleInterceptors() ?? []
    )
  }

  public func makeGetTokenInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenInfoInterceptors() ?? []
    )
  }

  public func makeGetAccountNftInfosCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getAccountNftInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountNftInfosInterceptors() ?? []
    )
  }

  public func makeGetTokenNftInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenNftInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfoInterceptors() ?? []
    )
  }

  public func makeGetTokenNftInfosCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenNftInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfosInterceptors() ?? []
    )
  }

  public func makePauseTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.pauseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepauseTokenInterceptors() ?? []
    )
  }

  public func makeUnpauseTokenCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.unpauseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunpauseTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_TokenServiceAsyncClientProtocol {
  public func createToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.createToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateTokenInterceptors() ?? []
    )
  }

  public func updateToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.updateToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateTokenInterceptors() ?? []
    )
  }

  public func mintToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.mintToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makemintTokenInterceptors() ?? []
    )
  }

  public func burnToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.burnToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeburnTokenInterceptors() ?? []
    )
  }

  public func deleteToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.deleteToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteTokenInterceptors() ?? []
    )
  }

  public func wipeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.wipeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makewipeTokenAccountInterceptors() ?? []
    )
  }

  public func freezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.freezeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makefreezeTokenAccountInterceptors() ?? []
    )
  }

  public func unfreezeTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.unfreezeTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunfreezeTokenAccountInterceptors() ?? []
    )
  }

  public func grantKycToTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.grantKycToTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegrantKycToTokenAccountInterceptors() ?? []
    )
  }

  public func revokeKycFromTokenAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.revokeKycFromTokenAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makerevokeKycFromTokenAccountInterceptors() ?? []
    )
  }

  public func associateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.associateTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeassociateTokensInterceptors() ?? []
    )
  }

  public func dissociateTokens(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.dissociateTokens.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedissociateTokensInterceptors() ?? []
    )
  }

  public func updateTokenFeeSchedule(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.updateTokenFeeSchedule.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateTokenFeeScheduleInterceptors() ?? []
    )
  }

  public func getTokenInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenInfoInterceptors() ?? []
    )
  }

  public func getAccountNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getAccountNftInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountNftInfosInterceptors() ?? []
    )
  }

  public func getTokenNftInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenNftInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfoInterceptors() ?? []
    )
  }

  public func getTokenNftInfos(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.getTokenNftInfos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTokenNftInfosInterceptors() ?? []
    )
  }

  public func pauseToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.pauseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makepauseTokenInterceptors() ?? []
    )
  }

  public func unpauseToken(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_TokenServiceClientMetadata.Methods.unpauseToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeunpauseTokenInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Proto_TokenServiceAsyncClient: Proto_TokenServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_TokenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Proto_TokenServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createToken'.
  func makecreateTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'updateToken'.
  func makeupdateTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'mintToken'.
  func makemintTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'burnToken'.
  func makeburnTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteToken'.
  func makedeleteTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'wipeTokenAccount'.
  func makewipeTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'freezeTokenAccount'.
  func makefreezeTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'unfreezeTokenAccount'.
  func makeunfreezeTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'grantKycToTokenAccount'.
  func makegrantKycToTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeKycFromTokenAccount'.
  func makerevokeKycFromTokenAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'associateTokens'.
  func makeassociateTokensInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'dissociateTokens'.
  func makedissociateTokensInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'updateTokenFeeSchedule'.
  func makeupdateTokenFeeScheduleInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getTokenInfo'.
  func makegetTokenInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getAccountNftInfos'.
  func makegetAccountNftInfosInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTokenNftInfo'.
  func makegetTokenNftInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTokenNftInfos'.
  func makegetTokenNftInfosInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'pauseToken'.
  func makepauseTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'unpauseToken'.
  func makeunpauseTokenInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]
}

public enum Proto_TokenServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TokenService",
    fullName: "proto.TokenService",
    methods: [
      Proto_TokenServiceClientMetadata.Methods.createToken,
      Proto_TokenServiceClientMetadata.Methods.updateToken,
      Proto_TokenServiceClientMetadata.Methods.mintToken,
      Proto_TokenServiceClientMetadata.Methods.burnToken,
      Proto_TokenServiceClientMetadata.Methods.deleteToken,
      Proto_TokenServiceClientMetadata.Methods.wipeTokenAccount,
      Proto_TokenServiceClientMetadata.Methods.freezeTokenAccount,
      Proto_TokenServiceClientMetadata.Methods.unfreezeTokenAccount,
      Proto_TokenServiceClientMetadata.Methods.grantKycToTokenAccount,
      Proto_TokenServiceClientMetadata.Methods.revokeKycFromTokenAccount,
      Proto_TokenServiceClientMetadata.Methods.associateTokens,
      Proto_TokenServiceClientMetadata.Methods.dissociateTokens,
      Proto_TokenServiceClientMetadata.Methods.updateTokenFeeSchedule,
      Proto_TokenServiceClientMetadata.Methods.getTokenInfo,
      Proto_TokenServiceClientMetadata.Methods.getAccountNftInfos,
      Proto_TokenServiceClientMetadata.Methods.getTokenNftInfo,
      Proto_TokenServiceClientMetadata.Methods.getTokenNftInfos,
      Proto_TokenServiceClientMetadata.Methods.pauseToken,
      Proto_TokenServiceClientMetadata.Methods.unpauseToken,
    ]
  )

  public enum Methods {
    public static let createToken = GRPCMethodDescriptor(
      name: "createToken",
      path: "/proto.TokenService/createToken",
      type: GRPCCallType.unary
    )

    public static let updateToken = GRPCMethodDescriptor(
      name: "updateToken",
      path: "/proto.TokenService/updateToken",
      type: GRPCCallType.unary
    )

    public static let mintToken = GRPCMethodDescriptor(
      name: "mintToken",
      path: "/proto.TokenService/mintToken",
      type: GRPCCallType.unary
    )

    public static let burnToken = GRPCMethodDescriptor(
      name: "burnToken",
      path: "/proto.TokenService/burnToken",
      type: GRPCCallType.unary
    )

    public static let deleteToken = GRPCMethodDescriptor(
      name: "deleteToken",
      path: "/proto.TokenService/deleteToken",
      type: GRPCCallType.unary
    )

    public static let wipeTokenAccount = GRPCMethodDescriptor(
      name: "wipeTokenAccount",
      path: "/proto.TokenService/wipeTokenAccount",
      type: GRPCCallType.unary
    )

    public static let freezeTokenAccount = GRPCMethodDescriptor(
      name: "freezeTokenAccount",
      path: "/proto.TokenService/freezeTokenAccount",
      type: GRPCCallType.unary
    )

    public static let unfreezeTokenAccount = GRPCMethodDescriptor(
      name: "unfreezeTokenAccount",
      path: "/proto.TokenService/unfreezeTokenAccount",
      type: GRPCCallType.unary
    )

    public static let grantKycToTokenAccount = GRPCMethodDescriptor(
      name: "grantKycToTokenAccount",
      path: "/proto.TokenService/grantKycToTokenAccount",
      type: GRPCCallType.unary
    )

    public static let revokeKycFromTokenAccount = GRPCMethodDescriptor(
      name: "revokeKycFromTokenAccount",
      path: "/proto.TokenService/revokeKycFromTokenAccount",
      type: GRPCCallType.unary
    )

    public static let associateTokens = GRPCMethodDescriptor(
      name: "associateTokens",
      path: "/proto.TokenService/associateTokens",
      type: GRPCCallType.unary
    )

    public static let dissociateTokens = GRPCMethodDescriptor(
      name: "dissociateTokens",
      path: "/proto.TokenService/dissociateTokens",
      type: GRPCCallType.unary
    )

    public static let updateTokenFeeSchedule = GRPCMethodDescriptor(
      name: "updateTokenFeeSchedule",
      path: "/proto.TokenService/updateTokenFeeSchedule",
      type: GRPCCallType.unary
    )

    public static let getTokenInfo = GRPCMethodDescriptor(
      name: "getTokenInfo",
      path: "/proto.TokenService/getTokenInfo",
      type: GRPCCallType.unary
    )

    public static let getAccountNftInfos = GRPCMethodDescriptor(
      name: "getAccountNftInfos",
      path: "/proto.TokenService/getAccountNftInfos",
      type: GRPCCallType.unary
    )

    public static let getTokenNftInfo = GRPCMethodDescriptor(
      name: "getTokenNftInfo",
      path: "/proto.TokenService/getTokenNftInfo",
      type: GRPCCallType.unary
    )

    public static let getTokenNftInfos = GRPCMethodDescriptor(
      name: "getTokenNftInfos",
      path: "/proto.TokenService/getTokenNftInfos",
      type: GRPCCallType.unary
    )

    public static let pauseToken = GRPCMethodDescriptor(
      name: "pauseToken",
      path: "/proto.TokenService/pauseToken",
      type: GRPCCallType.unary
    )

    public static let unpauseToken = GRPCMethodDescriptor(
      name: "unpauseToken",
      path: "/proto.TokenService/unpauseToken",
      type: GRPCCallType.unary
    )
  }
}

