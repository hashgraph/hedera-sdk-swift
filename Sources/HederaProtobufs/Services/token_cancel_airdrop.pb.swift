// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: token_cancel_airdrop.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Token Cancel Airdrop
/// Messages used to implement a transaction to cancel a pending airdrop.
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in [RFC2119](https://www.ietf.org/rfc/rfc2119).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Token cancel airdrop<br/>
/// Remove one or more pending airdrops from state on behalf of the sender(s)
/// for each airdrop.
///
/// Each pending airdrop canceled SHALL be removed from state and SHALL NOT be available to claim.<br/>
/// Each cancellation SHALL be represented in the transaction body and SHALL NOT be restated
/// in the record file.<br/>
/// All cancellations MUST succeed for this transaction to succeed.
public struct Proto_TokenCancelAirdropTransactionBody: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A list of one or more pending airdrop identifiers.<br/>
  /// This list declares the set of pending airdrop entries that the client
  /// wishes to cancel; on success all listed pending airdrop entries
  /// will be removed.
  /// <p>
  /// This transaction MUST be signed by the account referenced by a `sender_id` for
  /// each entry in this list.<br/>
  /// This list MUST NOT have any duplicate entries.<br/>
  /// This list MUST contain between 1 and 10 entries, inclusive.
  public var pendingAirdrops: [Proto_PendingAirdropId] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenCancelAirdropTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenCancelAirdropTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pending_airdrops"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pendingAirdrops) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pendingAirdrops.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingAirdrops, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenCancelAirdropTransactionBody, rhs: Proto_TokenCancelAirdropTransactionBody) -> Bool {
    if lhs.pendingAirdrops != rhs.pendingAirdrops {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
