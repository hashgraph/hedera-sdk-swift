// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/token/nft.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Representation of a Hedera Token Service NFT in the network Merkle tree.
public struct Proto_Nft: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The id of this NFT.
  public var nftID: Proto_NftID {
    get {return _storage._nftID ?? Proto_NftID()}
    set {_uniqueStorage()._nftID = newValue}
  }
  /// Returns true if `nftID` has been explicitly set.
  public var hasNftID: Bool {return _storage._nftID != nil}
  /// Clears the value of `nftID`. Subsequent reads from it will return its default value.
  public mutating func clearNftID() {_uniqueStorage()._nftID = nil}

  ///*
  /// The account or contract id that owns this NFT.
  ///
  /// If this number is zero in state, the NFT is owned by its token type's current treasury.
  public var ownerID: Proto_AccountID {
    get {return _storage._ownerID ?? Proto_AccountID()}
    set {_uniqueStorage()._ownerID = newValue}
  }
  /// Returns true if `ownerID` has been explicitly set.
  public var hasOwnerID: Bool {return _storage._ownerID != nil}
  /// Clears the value of `ownerID`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerID() {_uniqueStorage()._ownerID = nil}

  ///*
  /// The account or contract id approved to spend this NFT.
  ///
  /// If this number is zero, there is no approved spender.
  public var spenderID: Proto_AccountID {
    get {return _storage._spenderID ?? Proto_AccountID()}
    set {_uniqueStorage()._spenderID = newValue}
  }
  /// Returns true if `spenderID` has been explicitly set.
  public var hasSpenderID: Bool {return _storage._spenderID != nil}
  /// Clears the value of `spenderID`. Subsequent reads from it will return its default value.
  public mutating func clearSpenderID() {_uniqueStorage()._spenderID = nil}

  ///*
  /// The consensus time of the TokenMint that created this NFT.
  public var mintTime: Proto_Timestamp {
    get {return _storage._mintTime ?? Proto_Timestamp()}
    set {_uniqueStorage()._mintTime = newValue}
  }
  /// Returns true if `mintTime` has been explicitly set.
  public var hasMintTime: Bool {return _storage._mintTime != nil}
  /// Clears the value of `mintTime`. Subsequent reads from it will return its default value.
  public mutating func clearMintTime() {_uniqueStorage()._mintTime = nil}

  ///*
  /// The metadata of this NFT, up to 100 bytes; usually the UTF-8 encoding of a URI.
  public var metadata: Data {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  ///*
  /// If the owner of this NFT is not its token treasury, the id of the previous NFT 
  /// in the owner's "doubly-linked list" of owned NFTs (if any).
  public var ownerPreviousNftID: Proto_NftID {
    get {return _storage._ownerPreviousNftID ?? Proto_NftID()}
    set {_uniqueStorage()._ownerPreviousNftID = newValue}
  }
  /// Returns true if `ownerPreviousNftID` has been explicitly set.
  public var hasOwnerPreviousNftID: Bool {return _storage._ownerPreviousNftID != nil}
  /// Clears the value of `ownerPreviousNftID`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerPreviousNftID() {_uniqueStorage()._ownerPreviousNftID = nil}

  ///*
  /// If the owner of this NFT is not its token treasury, the id of the next NFT in 
  /// the owner's "doubly-linked list" of owned NFTs (if any).
  public var ownerNextNftID: Proto_NftID {
    get {return _storage._ownerNextNftID ?? Proto_NftID()}
    set {_uniqueStorage()._ownerNextNftID = newValue}
  }
  /// Returns true if `ownerNextNftID` has been explicitly set.
  public var hasOwnerNextNftID: Bool {return _storage._ownerNextNftID != nil}
  /// Clears the value of `ownerNextNftID`. Subsequent reads from it will return its default value.
  public mutating func clearOwnerNextNftID() {_uniqueStorage()._ownerNextNftID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_Nft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Nft"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "nft_id"),
    2: .standard(proto: "owner_id"),
    3: .standard(proto: "spender_id"),
    4: .standard(proto: "mint_time"),
    5: .same(proto: "metadata"),
    6: .standard(proto: "owner_previous_nft_id"),
    7: .standard(proto: "owner_next_nft_id"),
  ]

  fileprivate class _StorageClass {
    var _nftID: Proto_NftID? = nil
    var _ownerID: Proto_AccountID? = nil
    var _spenderID: Proto_AccountID? = nil
    var _mintTime: Proto_Timestamp? = nil
    var _metadata: Data = Data()
    var _ownerPreviousNftID: Proto_NftID? = nil
    var _ownerNextNftID: Proto_NftID? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _nftID = source._nftID
      _ownerID = source._ownerID
      _spenderID = source._spenderID
      _mintTime = source._mintTime
      _metadata = source._metadata
      _ownerPreviousNftID = source._ownerPreviousNftID
      _ownerNextNftID = source._ownerNextNftID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._nftID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._ownerID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._spenderID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._mintTime) }()
        case 5: try { try decoder.decodeSingularBytesField(value: &_storage._metadata) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._ownerPreviousNftID) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._ownerNextNftID) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._nftID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._ownerID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._spenderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._mintTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if !_storage._metadata.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._metadata, fieldNumber: 5)
      }
      try { if let v = _storage._ownerPreviousNftID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._ownerNextNftID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Nft, rhs: Proto_Nft) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._nftID != rhs_storage._nftID {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._spenderID != rhs_storage._spenderID {return false}
        if _storage._mintTime != rhs_storage._mintTime {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._ownerPreviousNftID != rhs_storage._ownerPreviousNftID {return false}
        if _storage._ownerNextNftID != rhs_storage._ownerNextNftID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
