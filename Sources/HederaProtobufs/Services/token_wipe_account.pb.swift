// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: token_wipe_account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Wipes the provided amount of tokens from the specified Account. Must be signed by the Token's
/// Wipe key.
/// If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
/// If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.
/// If the provided token is not found, the transaction will resolve to INVALID_TOKEN_ID.
/// If the provided token has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.
/// If an Association between the provided token and account is not found, the transaction will
/// resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.
/// If Wipe Key is not present in the Token, transaction results in TOKEN_HAS_NO_WIPE_KEY.
/// If the provided account is the Token's Treasury Account, transaction results in
/// CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT
/// On success, tokens are removed from the account and the total supply of the token is decreased by
/// the wiped amount.
///
/// If both amount and serialNumbers get filled, a INVALID_TRANSACTION_BODY response code will be
/// returned.
/// If the serialNumbers don't get filled for a non-fungible token type, a INVALID_WIPING_AMOUNT response
/// code will be returned.
/// If a zero amount is provided for a fungible token type, it will be treated as a regular transaction.
/// If the serialNumbers list contains a non-positive integer as a serial number, a INVALID_NFT_ID
/// response code will be returned.
/// If the serialNumbers' list count is greater than the batch size limit global dynamic property, a
/// BATCH_SIZE_LIMIT_EXCEEDED response code will be returned.
///
/// The amount provided is in the lowest denomination possible. Example:
/// Token A has 2 decimals. In order to wipe 100 tokens from account, one must provide amount of
/// 10000. In order to wipe 100.55 tokens, one must provide amount of 10055.
public struct Proto_TokenWipeAccountTransactionBody {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The token for which the account will be wiped. If token does not exist, transaction results
  /// in INVALID_TOKEN_ID
  public var token: Proto_TokenID {
    get {return _token ?? Proto_TokenID()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  ///*
  /// The account to be wiped
  public var account: Proto_AccountID {
    get {return _account ?? Proto_AccountID()}
    set {_account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return self._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {self._account = nil}

  ///*
  /// Applicable to tokens of type FUNGIBLE_COMMON. The amount of tokens to wipe from the specified
  /// account. Amount must be a positive non-zero number in the lowest denomination possible, not
  /// bigger than the token balance of the account (0; balance]
  public var amount: UInt64 = 0

  ///*
  /// Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial numbers to be wiped.
  public var serialNumbers: [Int64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _token: Proto_TokenID? = nil
  fileprivate var _account: Proto_AccountID? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_TokenWipeAccountTransactionBody: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_TokenWipeAccountTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TokenWipeAccountTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "account"),
    3: .same(proto: "amount"),
    4: .same(proto: "serialNumbers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._account) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 4: try { try decoder.decodeRepeatedInt64Field(value: &self.serialNumbers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._account {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if !self.serialNumbers.isEmpty {
      try visitor.visitPackedInt64Field(value: self.serialNumbers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TokenWipeAccountTransactionBody, rhs: Proto_TokenWipeAccountTransactionBody) -> Bool {
    if lhs._token != rhs._token {return false}
    if lhs._account != rhs._account {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.serialNumbers != rhs.serialNumbers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
