// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/token/account_pending_airdrop.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A node within a doubly linked list of pending airdrop references.<br/>
/// This internal state message forms the entries in a doubly-linked list
/// of references to pending airdrop entries that are "owed" by a particular
/// account as "sender".
///
/// Each entry in this list MUST refer to an existing pending airdrop.<br/>
/// The pending airdrop MUST NOT be claimed.<br/>
/// The pending airdrop MUST NOT be canceled.<br/>
/// The pending airdrop `sender` account's `head_pending_airdrop_id` field
/// MUST match the `pending_airdrop_id` field in this message.
///
/// ### Record Stream Effects
/// This value is not currently published in the record stream.
public struct Proto_AccountPendingAirdrop: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The value of the current airdrop id. SHALL NOT be set for non fungible tokens
  public var pendingAirdropValue: Proto_PendingAirdropValue {
    get {return _storage._pendingAirdropValue ?? Proto_PendingAirdropValue()}
    set {_uniqueStorage()._pendingAirdropValue = newValue}
  }
  /// Returns true if `pendingAirdropValue` has been explicitly set.
  public var hasPendingAirdropValue: Bool {return _storage._pendingAirdropValue != nil}
  /// Clears the value of `pendingAirdropValue`. Subsequent reads from it will return its default value.
  public mutating func clearPendingAirdropValue() {_uniqueStorage()._pendingAirdropValue = nil}

  ///*
  /// A pending airdrop identifier.<br/>
  /// This identifies the specific pending airdrop that precedes this position
  /// within the doubly linked list of pending airdrops "owed" by the sending
  /// account associated with this account airdrop "list".
  /// <p>
  /// This SHALL match `pending_airdrop_id` if this is the only entry
  /// in the "list".
  public var previousAirdrop: Proto_PendingAirdropId {
    get {return _storage._previousAirdrop ?? Proto_PendingAirdropId()}
    set {_uniqueStorage()._previousAirdrop = newValue}
  }
  /// Returns true if `previousAirdrop` has been explicitly set.
  public var hasPreviousAirdrop: Bool {return _storage._previousAirdrop != nil}
  /// Clears the value of `previousAirdrop`. Subsequent reads from it will return its default value.
  public mutating func clearPreviousAirdrop() {_uniqueStorage()._previousAirdrop = nil}

  ///*
  /// A pending airdrop identifier.<br/>
  /// This identifies the specific pending airdrop that follows this position
  /// within the doubly linked list of pending airdrops "owed" by the sending
  /// account associated with this account airdrop "list".
  /// <p>
  /// This SHALL match `pending_airdrop_id` if this is the only entry
  /// in the "list".
  public var nextAirdrop: Proto_PendingAirdropId {
    get {return _storage._nextAirdrop ?? Proto_PendingAirdropId()}
    set {_uniqueStorage()._nextAirdrop = newValue}
  }
  /// Returns true if `nextAirdrop` has been explicitly set.
  public var hasNextAirdrop: Bool {return _storage._nextAirdrop != nil}
  /// Clears the value of `nextAirdrop`. Subsequent reads from it will return its default value.
  public mutating func clearNextAirdrop() {_uniqueStorage()._nextAirdrop = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_AccountPendingAirdrop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountPendingAirdrop"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pending_airdrop_value"),
    2: .standard(proto: "previous_airdrop"),
    3: .standard(proto: "next_airdrop"),
  ]

  fileprivate class _StorageClass {
    var _pendingAirdropValue: Proto_PendingAirdropValue? = nil
    var _previousAirdrop: Proto_PendingAirdropId? = nil
    var _nextAirdrop: Proto_PendingAirdropId? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _pendingAirdropValue = source._pendingAirdropValue
      _previousAirdrop = source._previousAirdrop
      _nextAirdrop = source._nextAirdrop
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._pendingAirdropValue) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._previousAirdrop) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._nextAirdrop) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._pendingAirdropValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._previousAirdrop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._nextAirdrop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AccountPendingAirdrop, rhs: Proto_AccountPendingAirdrop) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pendingAirdropValue != rhs_storage._pendingAirdropValue {return false}
        if _storage._previousAirdrop != rhs_storage._previousAirdrop {return false}
        if _storage._nextAirdrop != rhs_storage._nextAirdrop {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
