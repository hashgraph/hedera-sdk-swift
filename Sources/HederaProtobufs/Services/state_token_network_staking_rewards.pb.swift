// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/token/network_staking_rewards.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// Representation of a Hedera Token Service staking reward entity in the network Merkle tree.
/// This consists of all the information needed to calculate the staking rewards for all nodes in the network. It is
/// calculated at the beginning of each staking period for all nodes and is needed to have same values
/// for reconnect.
///
/// As with all network entities, staking info is per node and has a unique entity number represented as shard.realm.X.
public struct Proto_NetworkStakingRewards: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Whether staking rewards are activated on the network. This is set to true when the balance of 0.0.800
  /// reaches minimum required balance.
  public var stakingRewardsActivated: Bool = false

  ///*
  /// Total of (balance + stakedToMe) for all accounts staked to all nodes in the network with declineReward=false, at the
  /// beginning of the new staking period.
  public var totalStakedRewardStart: Int64 = 0

  ///*
  /// Total of (balance + stakedToMe) for all accounts staked to all nodes in the network, at the beginning of the new
  /// staking period.
  public var totalStakedStart: Int64 = 0

  ///*
  /// The total staking rewards in tinybars that COULD be collected by all accounts staking to all nodes after the end
  /// of this staking period; assuming that no account "renounces" its rewards by, for example, setting declineReward=true.
  public var pendingRewards: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_NetworkStakingRewards: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NetworkStakingRewards"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "staking_rewards_activated"),
    2: .standard(proto: "total_staked_reward_start"),
    3: .standard(proto: "total_staked_start"),
    4: .standard(proto: "pending_rewards"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.stakingRewardsActivated) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalStakedRewardStart) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.totalStakedStart) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.pendingRewards) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.stakingRewardsActivated != false {
      try visitor.visitSingularBoolField(value: self.stakingRewardsActivated, fieldNumber: 1)
    }
    if self.totalStakedRewardStart != 0 {
      try visitor.visitSingularInt64Field(value: self.totalStakedRewardStart, fieldNumber: 2)
    }
    if self.totalStakedStart != 0 {
      try visitor.visitSingularInt64Field(value: self.totalStakedStart, fieldNumber: 3)
    }
    if self.pendingRewards != 0 {
      try visitor.visitSingularInt64Field(value: self.pendingRewards, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_NetworkStakingRewards, rhs: Proto_NetworkStakingRewards) -> Bool {
    if lhs.stakingRewardsActivated != rhs.stakingRewardsActivated {return false}
    if lhs.totalStakedRewardStart != rhs.totalStakedRewardStart {return false}
    if lhs.totalStakedStart != rhs.totalStakedStart {return false}
    if lhs.pendingRewards != rhs.pendingRewards {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
