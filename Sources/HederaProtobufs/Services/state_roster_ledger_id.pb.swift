// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/roster/ledger_id.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Ledger ID
/// A Ledger ID is a Threshold Signature Scheme (TSS) public key that
/// identifies the ledger.  A Ledger ID is intended to be long-lived, but
/// may change under rare circumstances.  The Ledger ID for a particular
/// distributed ledger can be used to validate the signature of that ledger
/// in, for example, a block stream "block proof".
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A ledger identifier.<br/>
/// This message identifies a ledger and is used to verify ledger
/// signatures in a Threshold Signature Scheme (TSS).
///
/// A ledger identifier SHALL be a public key defined according to the TSS
/// process.<br/>
/// A ledger identifier SHOULD NOT change, but MAY do so in rare
/// circumstances.<br/>
/// Clients SHOULD always check for the correct ledger identifier, according to
/// the network roster, before attempting to verify any state proof or other
/// ledger signature.
///
/// ### Block Stream Effects
/// Every block in the Block Stream `BlockProof` SHALL be signed via TSS and
/// MUST be verified with the ledger identifier current at the _start_ of that
/// block.
/// If the ledger identifier changes, the new value MUST be used to validate
/// Block Proof items after the change.
/// A change to the ledger identifier SHALL be reported in a State Change for
/// the block containing that change, which SHALL be verified with the _prior_
/// ledger identifier.
public struct Com_Hedera_Hapi_Node_State_Roster_LedgerId: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A public key.<br/>
  /// This key both identifies the ledger and can be used to verify ledger
  /// signatures.
  /// <p>
  /// This value MUST be set.<br/>
  /// This value MUST NOT be empty.<br/>
  /// This value MUST contain a valid public key.
  public var ledgerID: Data = Data()

  ///*
  /// A round number.<br/>
  /// This identifies when this ledger id becomes active.<br/>
  /// This value is REQUIRED.
  public var round: UInt64 = 0

  ///*
  /// A signature from the prior ledger key.<br/>
  /// This signature is the _previous_ ledger ID signing _this_ ledger ID.<br/>
  /// This value MAY be unset, if there is no prior ledger ID.<br/>
  /// This value SHOULD be set if a prior ledger ID exists
  /// to generate the signature.
  public var ledgerSignature: Data = Data()

  ///*
  /// The signatures from nodes in the active roster signing the new
  /// ledger id.<br/>
  /// These signatures establish a chain of trust from the network to the new
  /// ledger id.
  /// <p>
  /// This value MUST be present when the ledger signature of a previous ledger
  /// id is absent.
  public var rosterSignatures: Com_Hedera_Hapi_Node_State_Roster_RosterSignatures {
    get {return _rosterSignatures ?? Com_Hedera_Hapi_Node_State_Roster_RosterSignatures()}
    set {_rosterSignatures = newValue}
  }
  /// Returns true if `rosterSignatures` has been explicitly set.
  public var hasRosterSignatures: Bool {return self._rosterSignatures != nil}
  /// Clears the value of `rosterSignatures`. Subsequent reads from it will return its default value.
  public mutating func clearRosterSignatures() {self._rosterSignatures = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rosterSignatures: Com_Hedera_Hapi_Node_State_Roster_RosterSignatures? = nil
}

///*
/// A collection of signatures from nodes in a roster.
public struct Com_Hedera_Hapi_Node_State_Roster_RosterSignatures: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A roster hash for the roster that the node signatures are from.
  public var rosterHash: Data = Data()

  ///*
  /// A list of node signatures on the same message where all node ids in the
  /// NodeSignature objects are from the roster that the roster_hash represents.
  public var nodeSignatures: [Com_Hedera_Hapi_Node_State_Roster_NodeSignature] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// A pair of a _RSA_ signature and the node id of the node that created the
/// signature.
public struct Com_Hedera_Hapi_Node_State_Roster_NodeSignature: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The node id of the node that created the _RSA_ signature.
  /// This value MUST be set.<br/>
  /// This value MUST NOT be empty.<br/>
  /// This value is REQUIRED.
  public var nodeID: UInt64 = 0

  ///*
  /// The bytes of an _RSA_ signature.
  /// This value MUST be set.<br/>
  /// This value MUST NOT be empty.<br/>
  /// This value MUST contain a valid signature.
  public var nodeSignature: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.hedera.hapi.node.state.roster"

extension Com_Hedera_Hapi_Node_State_Roster_LedgerId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LedgerId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ledger_id"),
    2: .same(proto: "round"),
    3: .standard(proto: "ledger_signature"),
    4: .standard(proto: "roster_signatures"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.ledgerID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.ledgerSignature) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._rosterSignatures) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.ledgerID.isEmpty {
      try visitor.visitSingularBytesField(value: self.ledgerID, fieldNumber: 1)
    }
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 2)
    }
    if !self.ledgerSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.ledgerSignature, fieldNumber: 3)
    }
    try { if let v = self._rosterSignatures {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Roster_LedgerId, rhs: Com_Hedera_Hapi_Node_State_Roster_LedgerId) -> Bool {
    if lhs.ledgerID != rhs.ledgerID {return false}
    if lhs.round != rhs.round {return false}
    if lhs.ledgerSignature != rhs.ledgerSignature {return false}
    if lhs._rosterSignatures != rhs._rosterSignatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Hedera_Hapi_Node_State_Roster_RosterSignatures: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RosterSignatures"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "roster_hash"),
    2: .standard(proto: "node_signatures"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.rosterHash) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.nodeSignatures) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rosterHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.rosterHash, fieldNumber: 1)
    }
    if !self.nodeSignatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nodeSignatures, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Roster_RosterSignatures, rhs: Com_Hedera_Hapi_Node_State_Roster_RosterSignatures) -> Bool {
    if lhs.rosterHash != rhs.rosterHash {return false}
    if lhs.nodeSignatures != rhs.nodeSignatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Hedera_Hapi_Node_State_Roster_NodeSignature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NodeSignature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_id"),
    2: .standard(proto: "node_signature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.nodeSignature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.nodeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nodeID, fieldNumber: 1)
    }
    if !self.nodeSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodeSignature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Roster_NodeSignature, rhs: Com_Hedera_Hapi_Node_State_Roster_NodeSignature) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.nodeSignature != rhs.nodeSignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
