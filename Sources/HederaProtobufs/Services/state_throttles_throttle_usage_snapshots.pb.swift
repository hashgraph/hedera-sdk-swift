// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/throttles/throttle_usage_snapshots.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Proto_ThrottleUsageSnapshots: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Snapshots for TPS throttles.
  public var tpsThrottles: [Proto_ThrottleUsageSnapshot] = []

  ///*
  /// Snapshots for gas throttle.
  public var gasThrottle: Proto_ThrottleUsageSnapshot {
    get {return _gasThrottle ?? Proto_ThrottleUsageSnapshot()}
    set {_gasThrottle = newValue}
  }
  /// Returns true if `gasThrottle` has been explicitly set.
  public var hasGasThrottle: Bool {return self._gasThrottle != nil}
  /// Clears the value of `gasThrottle`. Subsequent reads from it will return its default value.
  public mutating func clearGasThrottle() {self._gasThrottle = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gasThrottle: Proto_ThrottleUsageSnapshot? = nil
}

public struct Proto_ThrottleUsageSnapshot: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// Used throttle capacity.
  public var used: Int64 = 0

  ///*
  /// The last time at which the capacity was updated.
  public var lastDecisionTime: Proto_Timestamp {
    get {return _lastDecisionTime ?? Proto_Timestamp()}
    set {_lastDecisionTime = newValue}
  }
  /// Returns true if `lastDecisionTime` has been explicitly set.
  public var hasLastDecisionTime: Bool {return self._lastDecisionTime != nil}
  /// Clears the value of `lastDecisionTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastDecisionTime() {self._lastDecisionTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastDecisionTime: Proto_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ThrottleUsageSnapshots: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThrottleUsageSnapshots"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tps_throttles"),
    2: .standard(proto: "gas_throttle"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.tpsThrottles) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._gasThrottle) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.tpsThrottles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tpsThrottles, fieldNumber: 1)
    }
    try { if let v = self._gasThrottle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThrottleUsageSnapshots, rhs: Proto_ThrottleUsageSnapshots) -> Bool {
    if lhs.tpsThrottles != rhs.tpsThrottles {return false}
    if lhs._gasThrottle != rhs._gasThrottle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ThrottleUsageSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThrottleUsageSnapshot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "used"),
    2: .standard(proto: "last_decision_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.used) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastDecisionTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.used != 0 {
      try visitor.visitSingularInt64Field(value: self.used, fieldNumber: 1)
    }
    try { if let v = self._lastDecisionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThrottleUsageSnapshot, rhs: Proto_ThrottleUsageSnapshot) -> Bool {
    if lhs.used != rhs.used {return false}
    if lhs._lastDecisionTime != rhs._lastDecisionTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
