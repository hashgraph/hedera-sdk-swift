//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: crypto_service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


///*
/// Transactions and queries for the Crypto Service
///
/// Usage: instantiate `Proto_CryptoServiceClient`, then call methods of this protocol to make API calls.
public protocol Proto_CryptoServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? { get }

  func createAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func updateAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func cryptoTransfer(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func cryptoDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func approveAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func addLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func deleteLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func getLiveHash(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getAccountRecords(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func cryptoGetBalance(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getAccountInfo(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTransactionReceipts(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getFastTransactionRecord(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getTxRecordByTxID(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>

  func getStakersByAccountID(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Query, Proto_Response>
}

extension Proto_CryptoServiceClientProtocol {
  public var serviceName: String {
    return "proto.CryptoService"
  }

  ///*
  /// Creates a new account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to createAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateAccountInterceptors() ?? []
    )
  }

  ///*
  /// Updates an account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to updateAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? []
    )
  }

  ///*
  /// Initiates a transfer by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoTransfer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cryptoTransfer(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? []
    )
  }

  ///*
  /// Deletes and account by submitting the transaction
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoDelete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cryptoDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? []
    )
  }

  ///*
  /// Adds one or more approved allowances for spenders to transfer the paying account's hbar or tokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to approveAllowances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func approveAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.approveAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? []
    )
  }

  ///*
  /// Deletes one or more of the specific approved NFT serial numbers on an owner account.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteAllowances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? []
    )
  }

  ///*
  /// (NOT CURRENTLY SUPPORTED) Adds a livehash
  ///
  /// - Parameters:
  ///   - request: Request to send to addLiveHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.addLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? []
    )
  }

  ///*
  /// (NOT CURRENTLY SUPPORTED) Deletes a livehash
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteLiveHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? []
    )
  }

  ///*
  /// (NOT CURRENTLY SUPPORTED) Retrieves a livehash for an account
  ///
  /// - Parameters:
  ///   - request: Request to send to getLiveHash.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getLiveHash(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? []
    )
  }

  ///*
  /// Returns all transactions in the last 180s of consensus time for which the given account was
  /// the effective payer <b>and</b> network property <tt>ledger.keepRecordsInState</tt> was
  /// <tt>true</tt>.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountRecords.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccountRecords(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? []
    )
  }

  ///*
  /// Retrieves the balance of an account
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoGetBalance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cryptoGetBalance(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? []
    )
  }

  ///*
  /// Retrieves the metadata of an account
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getAccountInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? []
    )
  }

  ///*
  /// Retrieves the latest receipt for a transaction that is either awaiting consensus, or reached
  /// consensus in the last 180 seconds
  ///
  /// - Parameters:
  ///   - request: Request to send to getTransactionReceipts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTransactionReceipts(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? []
    )
  }

  ///*
  /// (NOT CURRENTLY SUPPORTED) Returns the records of transactions recently funded by an account
  ///
  /// - Parameters:
  ///   - request: Request to send to getFastTransactionRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getFastTransactionRecord(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getFastTransactionRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFastTransactionRecordInterceptors() ?? []
    )
  }

  ///*
  /// Retrieves the record of a transaction that is either awaiting consensus, or reached consensus
  /// in the last 180 seconds
  ///
  /// - Parameters:
  ///   - request: Request to send to getTxRecordByTxID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTxRecordByTxID(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? []
    )
  }

  ///*
  /// (NOT CURRENTLY SUPPORTED) Retrieves the stakers for a node by account id
  ///
  /// - Parameters:
  ///   - request: Request to send to getStakersByAccountID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getStakersByAccountID(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getStakersByAccountID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetStakersByAccountIDInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Proto_CryptoServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Proto_CryptoServiceNIOClient")
public final class Proto_CryptoServiceClient: Proto_CryptoServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the proto.CryptoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct Proto_CryptoServiceNIOClient: Proto_CryptoServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the proto.CryptoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///*
/// Transactions and queries for the Crypto Service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol Proto_CryptoServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeUpdateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeCryptoTransferCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeCryptoDeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeApproveAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDeleteAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeAddLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeDeleteLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse>

  func makeGetLiveHashCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetAccountRecordsCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeCryptoGetBalanceCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetAccountInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetTransactionReceiptsCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetFastTransactionRecordCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetTxRecordByTxIDCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>

  func makeGetStakersByAccountIDCall(
    _ request: Proto_Query,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_CryptoServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return Proto_CryptoServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateAccountInterceptors() ?? []
    )
  }

  public func makeUpdateAccountCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? []
    )
  }

  public func makeCryptoTransferCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? []
    )
  }

  public func makeCryptoDeleteCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? []
    )
  }

  public func makeApproveAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.approveAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? []
    )
  }

  public func makeDeleteAllowancesCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? []
    )
  }

  public func makeAddLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.addLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? []
    )
  }

  public func makeDeleteLiveHashCall(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? []
    )
  }

  public func makeGetLiveHashCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? []
    )
  }

  public func makeGetAccountRecordsCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? []
    )
  }

  public func makeCryptoGetBalanceCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? []
    )
  }

  public func makeGetAccountInfoCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? []
    )
  }

  public func makeGetTransactionReceiptsCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? []
    )
  }

  public func makeGetFastTransactionRecordCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getFastTransactionRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFastTransactionRecordInterceptors() ?? []
    )
  }

  public func makeGetTxRecordByTxIDCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? []
    )
  }

  public func makeGetStakersByAccountIDCall(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Query, Proto_Response> {
    return self.makeAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getStakersByAccountID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetStakersByAccountIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Proto_CryptoServiceAsyncClientProtocol {
  public func createAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.createAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecreateAccountInterceptors() ?? []
    )
  }

  public func updateAccount(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.updateAccount.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeupdateAccountInterceptors() ?? []
    )
  }

  public func cryptoTransfer(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoTransferInterceptors() ?? []
    )
  }

  public func cryptoDelete(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoDelete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoDeleteInterceptors() ?? []
    )
  }

  public func approveAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.approveAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeapproveAllowancesInterceptors() ?? []
    )
  }

  public func deleteAllowances(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteAllowances.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteAllowancesInterceptors() ?? []
    )
  }

  public func addLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.addLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddLiveHashInterceptors() ?? []
    )
  }

  public func deleteLiveHash(
    _ request: Proto_Transaction,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_TransactionResponse {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makedeleteLiveHashInterceptors() ?? []
    )
  }

  public func getLiveHash(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getLiveHash.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetLiveHashInterceptors() ?? []
    )
  }

  public func getAccountRecords(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountRecords.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountRecordsInterceptors() ?? []
    )
  }

  public func cryptoGetBalance(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecryptoGetBalanceInterceptors() ?? []
    )
  }

  public func getAccountInfo(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getAccountInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetAccountInfoInterceptors() ?? []
    )
  }

  public func getTransactionReceipts(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTransactionReceiptsInterceptors() ?? []
    )
  }

  public func getFastTransactionRecord(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getFastTransactionRecord.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetFastTransactionRecordInterceptors() ?? []
    )
  }

  public func getTxRecordByTxID(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetTxRecordByTxIDInterceptors() ?? []
    )
  }

  public func getStakersByAccountID(
    _ request: Proto_Query,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Response {
    return try await self.performAsyncUnaryCall(
      path: Proto_CryptoServiceClientMetadata.Methods.getStakersByAccountID.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegetStakersByAccountIDInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct Proto_CryptoServiceAsyncClient: Proto_CryptoServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Proto_CryptoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol Proto_CryptoServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createAccount'.
  func makecreateAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'updateAccount'.
  func makeupdateAccountInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'cryptoTransfer'.
  func makecryptoTransferInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'cryptoDelete'.
  func makecryptoDeleteInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'approveAllowances'.
  func makeapproveAllowancesInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteAllowances'.
  func makedeleteAllowancesInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'addLiveHash'.
  func makeaddLiveHashInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteLiveHash'.
  func makedeleteLiveHashInterceptors() -> [ClientInterceptor<Proto_Transaction, Proto_TransactionResponse>]

  /// - Returns: Interceptors to use when invoking 'getLiveHash'.
  func makegetLiveHashInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getAccountRecords'.
  func makegetAccountRecordsInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'cryptoGetBalance'.
  func makecryptoGetBalanceInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getAccountInfo'.
  func makegetAccountInfoInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTransactionReceipts'.
  func makegetTransactionReceiptsInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getFastTransactionRecord'.
  func makegetFastTransactionRecordInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getTxRecordByTxID'.
  func makegetTxRecordByTxIDInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]

  /// - Returns: Interceptors to use when invoking 'getStakersByAccountID'.
  func makegetStakersByAccountIDInterceptors() -> [ClientInterceptor<Proto_Query, Proto_Response>]
}

public enum Proto_CryptoServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CryptoService",
    fullName: "proto.CryptoService",
    methods: [
      Proto_CryptoServiceClientMetadata.Methods.createAccount,
      Proto_CryptoServiceClientMetadata.Methods.updateAccount,
      Proto_CryptoServiceClientMetadata.Methods.cryptoTransfer,
      Proto_CryptoServiceClientMetadata.Methods.cryptoDelete,
      Proto_CryptoServiceClientMetadata.Methods.approveAllowances,
      Proto_CryptoServiceClientMetadata.Methods.deleteAllowances,
      Proto_CryptoServiceClientMetadata.Methods.addLiveHash,
      Proto_CryptoServiceClientMetadata.Methods.deleteLiveHash,
      Proto_CryptoServiceClientMetadata.Methods.getLiveHash,
      Proto_CryptoServiceClientMetadata.Methods.getAccountRecords,
      Proto_CryptoServiceClientMetadata.Methods.cryptoGetBalance,
      Proto_CryptoServiceClientMetadata.Methods.getAccountInfo,
      Proto_CryptoServiceClientMetadata.Methods.getTransactionReceipts,
      Proto_CryptoServiceClientMetadata.Methods.getFastTransactionRecord,
      Proto_CryptoServiceClientMetadata.Methods.getTxRecordByTxID,
      Proto_CryptoServiceClientMetadata.Methods.getStakersByAccountID,
    ]
  )

  public enum Methods {
    public static let createAccount = GRPCMethodDescriptor(
      name: "createAccount",
      path: "/proto.CryptoService/createAccount",
      type: GRPCCallType.unary
    )

    public static let updateAccount = GRPCMethodDescriptor(
      name: "updateAccount",
      path: "/proto.CryptoService/updateAccount",
      type: GRPCCallType.unary
    )

    public static let cryptoTransfer = GRPCMethodDescriptor(
      name: "cryptoTransfer",
      path: "/proto.CryptoService/cryptoTransfer",
      type: GRPCCallType.unary
    )

    public static let cryptoDelete = GRPCMethodDescriptor(
      name: "cryptoDelete",
      path: "/proto.CryptoService/cryptoDelete",
      type: GRPCCallType.unary
    )

    public static let approveAllowances = GRPCMethodDescriptor(
      name: "approveAllowances",
      path: "/proto.CryptoService/approveAllowances",
      type: GRPCCallType.unary
    )

    public static let deleteAllowances = GRPCMethodDescriptor(
      name: "deleteAllowances",
      path: "/proto.CryptoService/deleteAllowances",
      type: GRPCCallType.unary
    )

    public static let addLiveHash = GRPCMethodDescriptor(
      name: "addLiveHash",
      path: "/proto.CryptoService/addLiveHash",
      type: GRPCCallType.unary
    )

    public static let deleteLiveHash = GRPCMethodDescriptor(
      name: "deleteLiveHash",
      path: "/proto.CryptoService/deleteLiveHash",
      type: GRPCCallType.unary
    )

    public static let getLiveHash = GRPCMethodDescriptor(
      name: "getLiveHash",
      path: "/proto.CryptoService/getLiveHash",
      type: GRPCCallType.unary
    )

    public static let getAccountRecords = GRPCMethodDescriptor(
      name: "getAccountRecords",
      path: "/proto.CryptoService/getAccountRecords",
      type: GRPCCallType.unary
    )

    public static let cryptoGetBalance = GRPCMethodDescriptor(
      name: "cryptoGetBalance",
      path: "/proto.CryptoService/cryptoGetBalance",
      type: GRPCCallType.unary
    )

    public static let getAccountInfo = GRPCMethodDescriptor(
      name: "getAccountInfo",
      path: "/proto.CryptoService/getAccountInfo",
      type: GRPCCallType.unary
    )

    public static let getTransactionReceipts = GRPCMethodDescriptor(
      name: "getTransactionReceipts",
      path: "/proto.CryptoService/getTransactionReceipts",
      type: GRPCCallType.unary
    )

    public static let getFastTransactionRecord = GRPCMethodDescriptor(
      name: "getFastTransactionRecord",
      path: "/proto.CryptoService/getFastTransactionRecord",
      type: GRPCCallType.unary
    )

    public static let getTxRecordByTxID = GRPCMethodDescriptor(
      name: "getTxRecordByTxID",
      path: "/proto.CryptoService/getTxRecordByTxID",
      type: GRPCCallType.unary
    )

    public static let getStakersByAccountID = GRPCMethodDescriptor(
      name: "getStakersByAccountID",
      path: "/proto.CryptoService/getStakersByAccountID",
      type: GRPCCallType.unary
    )
  }
}

