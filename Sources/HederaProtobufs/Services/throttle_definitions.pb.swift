// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: throttle_definitions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A set of operations which should be collectively throttled at a given milli-ops-per-second limit.
public struct Proto_ThrottleGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The operations to be throttled
  public var operations: [Proto_HederaFunctionality] = []

  ///*
  /// The number of total operations per second across the entire network, multiplied by 1000. So, to
  /// choose 3 operations per second (which on a network of 30 nodes is a tenth of an operation per
  /// second for each node), set milliOpsPerSec = 3000. And to choose 3.6 ops per second, use
  /// milliOpsPerSec = 3600. Minimum allowed value is 1, and maximum allowed value is 9223372.
  public var milliOpsPerSec: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// A list of throttle groups that should all compete for the same internal bucket.
public struct Proto_ThrottleBucket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A name for this bucket (primarily for use in logs)
  public var name: String = String()

  ///*
  /// The number of milliseconds required for this bucket to drain completely when full. The product
  /// of this number and the least common multiple of the milliOpsPerSec values in this bucket must
  /// not exceed 9223372036.
  public var burstPeriodMs: UInt64 = 0

  ///*
  /// The throttle groups competing for this bucket
  public var throttleGroups: [Proto_ThrottleGroup] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// A list of throttle buckets which, simultaneously enforced, define the system's throttling policy.
/// <ol>
/// <li> When an operation appears in more than one throttling bucket, all its buckets must have room
/// or it will be throttled.</li>
/// <li>An operation assigned to no buckets is always throttled.</li>
/// </ol>
public struct Proto_ThrottleDefinitions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var throttleBuckets: [Proto_ThrottleBucket] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_ThrottleGroup: @unchecked Sendable {}
extension Proto_ThrottleBucket: @unchecked Sendable {}
extension Proto_ThrottleDefinitions: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_ThrottleGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThrottleGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operations"),
    2: .same(proto: "milliOpsPerSec"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.operations) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.milliOpsPerSec) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operations.isEmpty {
      try visitor.visitPackedEnumField(value: self.operations, fieldNumber: 1)
    }
    if self.milliOpsPerSec != 0 {
      try visitor.visitSingularUInt64Field(value: self.milliOpsPerSec, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThrottleGroup, rhs: Proto_ThrottleGroup) -> Bool {
    if lhs.operations != rhs.operations {return false}
    if lhs.milliOpsPerSec != rhs.milliOpsPerSec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ThrottleBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThrottleBucket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "burstPeriodMs"),
    3: .same(proto: "throttleGroups"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.burstPeriodMs) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.throttleGroups) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.burstPeriodMs != 0 {
      try visitor.visitSingularUInt64Field(value: self.burstPeriodMs, fieldNumber: 2)
    }
    if !self.throttleGroups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.throttleGroups, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThrottleBucket, rhs: Proto_ThrottleBucket) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.burstPeriodMs != rhs.burstPeriodMs {return false}
    if lhs.throttleGroups != rhs.throttleGroups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ThrottleDefinitions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThrottleDefinitions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "throttleBuckets"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.throttleBuckets) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.throttleBuckets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.throttleBuckets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThrottleDefinitions, rhs: Proto_ThrottleDefinitions) -> Bool {
    if lhs.throttleBuckets != rhs.throttleBuckets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
