// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: response.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A single response, which is returned from the node to the client, after the client sent the node
/// a query. This includes all responses.
public struct Proto_Response: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var response: Proto_Response.OneOf_Response? = nil

  ///*
  /// Get all entities associated with a given key
  public var getByKey: Proto_GetByKeyResponse {
    get {
      if case .getByKey(let v)? = response {return v}
      return Proto_GetByKeyResponse()
    }
    set {response = .getByKey(newValue)}
  }

  ///*
  /// Get the IDs in the format used in transactions, given the format used in Solidity
  public var getBySolidityID: Proto_GetBySolidityIDResponse {
    get {
      if case .getBySolidityID(let v)? = response {return v}
      return Proto_GetBySolidityIDResponse()
    }
    set {response = .getBySolidityID(newValue)}
  }

  ///*
  /// Response to call a function of a smart contract instance
  public var contractCallLocal: Proto_ContractCallLocalResponse {
    get {
      if case .contractCallLocal(let v)? = response {return v}
      return Proto_ContractCallLocalResponse()
    }
    set {response = .contractCallLocal(newValue)}
  }

  ///*
  /// Get the runtime code for a smart contract instance
  public var contractGetBytecodeResponse: Proto_ContractGetBytecodeResponse {
    get {
      if case .contractGetBytecodeResponse(let v)? = response {return v}
      return Proto_ContractGetBytecodeResponse()
    }
    set {response = .contractGetBytecodeResponse(newValue)}
  }

  ///*
  /// Get information about a smart contract instance
  public var contractGetInfo: Proto_ContractGetInfoResponse {
    get {
      if case .contractGetInfo(let v)? = response {return v}
      return Proto_ContractGetInfoResponse()
    }
    set {response = .contractGetInfo(newValue)}
  }

  ///*
  /// Get all existing records for a smart contract instance
  public var contractGetRecordsResponse: Proto_ContractGetRecordsResponse {
    get {
      if case .contractGetRecordsResponse(let v)? = response {return v}
      return Proto_ContractGetRecordsResponse()
    }
    set {response = .contractGetRecordsResponse(newValue)}
  }

  ///*
  /// Get the current balance in a cryptocurrency account
  public var cryptogetAccountBalance: Proto_CryptoGetAccountBalanceResponse {
    get {
      if case .cryptogetAccountBalance(let v)? = response {return v}
      return Proto_CryptoGetAccountBalanceResponse()
    }
    set {response = .cryptogetAccountBalance(newValue)}
  }

  ///*
  /// Get all the records that currently exist for transactions involving an account
  public var cryptoGetAccountRecords: Proto_CryptoGetAccountRecordsResponse {
    get {
      if case .cryptoGetAccountRecords(let v)? = response {return v}
      return Proto_CryptoGetAccountRecordsResponse()
    }
    set {response = .cryptoGetAccountRecords(newValue)}
  }

  ///*
  /// Get all information about an account
  public var cryptoGetInfo: Proto_CryptoGetInfoResponse {
    get {
      if case .cryptoGetInfo(let v)? = response {return v}
      return Proto_CryptoGetInfoResponse()
    }
    set {response = .cryptoGetInfo(newValue)}
  }

  ///*
  /// Contains a livehash associated to an account
  public var cryptoGetLiveHash: Proto_CryptoGetLiveHashResponse {
    get {
      if case .cryptoGetLiveHash(let v)? = response {return v}
      return Proto_CryptoGetLiveHashResponse()
    }
    set {response = .cryptoGetLiveHash(newValue)}
  }

  ///*
  /// Get all the accounts that proxy stake to a given account, and how much they proxy stake
  public var cryptoGetProxyStakers: Proto_CryptoGetStakersResponse {
    get {
      if case .cryptoGetProxyStakers(let v)? = response {return v}
      return Proto_CryptoGetStakersResponse()
    }
    set {response = .cryptoGetProxyStakers(newValue)}
  }

  ///*
  /// Get the contents of a file (the bytes stored in it)
  public var fileGetContents: Proto_FileGetContentsResponse {
    get {
      if case .fileGetContents(let v)? = response {return v}
      return Proto_FileGetContentsResponse()
    }
    set {response = .fileGetContents(newValue)}
  }

  ///*
  /// Get information about a file, such as its expiration date
  public var fileGetInfo: Proto_FileGetInfoResponse {
    get {
      if case .fileGetInfo(let v)? = response {return v}
      return Proto_FileGetInfoResponse()
    }
    set {response = .fileGetInfo(newValue)}
  }

  ///*
  /// Get a receipt for a transaction
  public var transactionGetReceipt: Proto_TransactionGetReceiptResponse {
    get {
      if case .transactionGetReceipt(let v)? = response {return v}
      return Proto_TransactionGetReceiptResponse()
    }
    set {response = .transactionGetReceipt(newValue)}
  }

  ///*
  /// Get a record for a transaction
  public var transactionGetRecord: Proto_TransactionGetRecordResponse {
    get {
      if case .transactionGetRecord(let v)? = response {return v}
      return Proto_TransactionGetRecordResponse()
    }
    set {response = .transactionGetRecord(newValue)}
  }

  ///*
  /// Get a record for a transaction (lasts 180 seconds)
  public var transactionGetFastRecord: Proto_TransactionGetFastRecordResponse {
    get {
      if case .transactionGetFastRecord(let v)? = response {return v}
      return Proto_TransactionGetFastRecordResponse()
    }
    set {response = .transactionGetFastRecord(newValue)}
  }

  ///*
  /// Parameters of and state of a consensus topic..
  public var consensusGetTopicInfo: Proto_ConsensusGetTopicInfoResponse {
    get {
      if case .consensusGetTopicInfo(let v)? = response {return v}
      return Proto_ConsensusGetTopicInfoResponse()
    }
    set {response = .consensusGetTopicInfo(newValue)}
  }

  ///*
  /// Semantic versions of Hedera Services and HAPI proto
  public var networkGetVersionInfo: Proto_NetworkGetVersionInfoResponse {
    get {
      if case .networkGetVersionInfo(let v)? = response {return v}
      return Proto_NetworkGetVersionInfoResponse()
    }
    set {response = .networkGetVersionInfo(newValue)}
  }

  ///*
  /// Get all information about a token
  public var tokenGetInfo: Proto_TokenGetInfoResponse {
    get {
      if case .tokenGetInfo(let v)? = response {return v}
      return Proto_TokenGetInfoResponse()
    }
    set {response = .tokenGetInfo(newValue)}
  }

  ///*
  /// Get all information about a schedule entity
  public var scheduleGetInfo: Proto_ScheduleGetInfoResponse {
    get {
      if case .scheduleGetInfo(let v)? = response {return v}
      return Proto_ScheduleGetInfoResponse()
    }
    set {response = .scheduleGetInfo(newValue)}
  }

  ///*
  /// A list of the NFTs associated with the account
  public var tokenGetAccountNftInfos: Proto_TokenGetAccountNftInfosResponse {
    get {
      if case .tokenGetAccountNftInfos(let v)? = response {return v}
      return Proto_TokenGetAccountNftInfosResponse()
    }
    set {response = .tokenGetAccountNftInfos(newValue)}
  }

  ///*
  /// All information about an NFT
  public var tokenGetNftInfo: Proto_TokenGetNftInfoResponse {
    get {
      if case .tokenGetNftInfo(let v)? = response {return v}
      return Proto_TokenGetNftInfoResponse()
    }
    set {response = .tokenGetNftInfo(newValue)}
  }

  ///*
  /// A list of the NFTs for the token
  public var tokenGetNftInfos: Proto_TokenGetNftInfosResponse {
    get {
      if case .tokenGetNftInfos(let v)? = response {return v}
      return Proto_TokenGetNftInfosResponse()
    }
    set {response = .tokenGetNftInfos(newValue)}
  }

  ///*
  /// Execution times of "sufficiently recent" transactions
  public var networkGetExecutionTime: Proto_NetworkGetExecutionTimeResponse {
    get {
      if case .networkGetExecutionTime(let v)? = response {return v}
      return Proto_NetworkGetExecutionTimeResponse()
    }
    set {response = .networkGetExecutionTime(newValue)}
  }

  ///*
  /// Gets all information about an account including allowances granted by the account
  public var accountDetails: Proto_GetAccountDetailsResponse {
    get {
      if case .accountDetails(let v)? = response {return v}
      return Proto_GetAccountDetailsResponse()
    }
    set {response = .accountDetails(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Response: Equatable, Sendable {
    ///*
    /// Get all entities associated with a given key
    case getByKey(Proto_GetByKeyResponse)
    ///*
    /// Get the IDs in the format used in transactions, given the format used in Solidity
    case getBySolidityID(Proto_GetBySolidityIDResponse)
    ///*
    /// Response to call a function of a smart contract instance
    case contractCallLocal(Proto_ContractCallLocalResponse)
    ///*
    /// Get the runtime code for a smart contract instance
    case contractGetBytecodeResponse(Proto_ContractGetBytecodeResponse)
    ///*
    /// Get information about a smart contract instance
    case contractGetInfo(Proto_ContractGetInfoResponse)
    ///*
    /// Get all existing records for a smart contract instance
    case contractGetRecordsResponse(Proto_ContractGetRecordsResponse)
    ///*
    /// Get the current balance in a cryptocurrency account
    case cryptogetAccountBalance(Proto_CryptoGetAccountBalanceResponse)
    ///*
    /// Get all the records that currently exist for transactions involving an account
    case cryptoGetAccountRecords(Proto_CryptoGetAccountRecordsResponse)
    ///*
    /// Get all information about an account
    case cryptoGetInfo(Proto_CryptoGetInfoResponse)
    ///*
    /// Contains a livehash associated to an account
    case cryptoGetLiveHash(Proto_CryptoGetLiveHashResponse)
    ///*
    /// Get all the accounts that proxy stake to a given account, and how much they proxy stake
    case cryptoGetProxyStakers(Proto_CryptoGetStakersResponse)
    ///*
    /// Get the contents of a file (the bytes stored in it)
    case fileGetContents(Proto_FileGetContentsResponse)
    ///*
    /// Get information about a file, such as its expiration date
    case fileGetInfo(Proto_FileGetInfoResponse)
    ///*
    /// Get a receipt for a transaction
    case transactionGetReceipt(Proto_TransactionGetReceiptResponse)
    ///*
    /// Get a record for a transaction
    case transactionGetRecord(Proto_TransactionGetRecordResponse)
    ///*
    /// Get a record for a transaction (lasts 180 seconds)
    case transactionGetFastRecord(Proto_TransactionGetFastRecordResponse)
    ///*
    /// Parameters of and state of a consensus topic..
    case consensusGetTopicInfo(Proto_ConsensusGetTopicInfoResponse)
    ///*
    /// Semantic versions of Hedera Services and HAPI proto
    case networkGetVersionInfo(Proto_NetworkGetVersionInfoResponse)
    ///*
    /// Get all information about a token
    case tokenGetInfo(Proto_TokenGetInfoResponse)
    ///*
    /// Get all information about a schedule entity
    case scheduleGetInfo(Proto_ScheduleGetInfoResponse)
    ///*
    /// A list of the NFTs associated with the account
    case tokenGetAccountNftInfos(Proto_TokenGetAccountNftInfosResponse)
    ///*
    /// All information about an NFT
    case tokenGetNftInfo(Proto_TokenGetNftInfoResponse)
    ///*
    /// A list of the NFTs for the token
    case tokenGetNftInfos(Proto_TokenGetNftInfosResponse)
    ///*
    /// Execution times of "sufficiently recent" transactions
    case networkGetExecutionTime(Proto_NetworkGetExecutionTimeResponse)
    ///*
    /// Gets all information about an account including allowances granted by the account
    case accountDetails(Proto_GetAccountDetailsResponse)

  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "getByKey"),
    2: .same(proto: "getBySolidityID"),
    3: .same(proto: "contractCallLocal"),
    5: .same(proto: "contractGetBytecodeResponse"),
    4: .same(proto: "contractGetInfo"),
    6: .same(proto: "contractGetRecordsResponse"),
    7: .same(proto: "cryptogetAccountBalance"),
    8: .same(proto: "cryptoGetAccountRecords"),
    9: .same(proto: "cryptoGetInfo"),
    10: .same(proto: "cryptoGetLiveHash"),
    11: .same(proto: "cryptoGetProxyStakers"),
    12: .same(proto: "fileGetContents"),
    13: .same(proto: "fileGetInfo"),
    14: .same(proto: "transactionGetReceipt"),
    15: .same(proto: "transactionGetRecord"),
    16: .same(proto: "transactionGetFastRecord"),
    150: .same(proto: "consensusGetTopicInfo"),
    151: .same(proto: "networkGetVersionInfo"),
    152: .same(proto: "tokenGetInfo"),
    153: .same(proto: "scheduleGetInfo"),
    154: .same(proto: "tokenGetAccountNftInfos"),
    155: .same(proto: "tokenGetNftInfo"),
    156: .same(proto: "tokenGetNftInfos"),
    157: .same(proto: "networkGetExecutionTime"),
    158: .same(proto: "accountDetails"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Proto_GetByKeyResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getByKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getByKey(v)
        }
      }()
      case 2: try {
        var v: Proto_GetBySolidityIDResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .getBySolidityID(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .getBySolidityID(v)
        }
      }()
      case 3: try {
        var v: Proto_ContractCallLocalResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .contractCallLocal(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .contractCallLocal(v)
        }
      }()
      case 4: try {
        var v: Proto_ContractGetInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .contractGetInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .contractGetInfo(v)
        }
      }()
      case 5: try {
        var v: Proto_ContractGetBytecodeResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .contractGetBytecodeResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .contractGetBytecodeResponse(v)
        }
      }()
      case 6: try {
        var v: Proto_ContractGetRecordsResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .contractGetRecordsResponse(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .contractGetRecordsResponse(v)
        }
      }()
      case 7: try {
        var v: Proto_CryptoGetAccountBalanceResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .cryptogetAccountBalance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .cryptogetAccountBalance(v)
        }
      }()
      case 8: try {
        var v: Proto_CryptoGetAccountRecordsResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .cryptoGetAccountRecords(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .cryptoGetAccountRecords(v)
        }
      }()
      case 9: try {
        var v: Proto_CryptoGetInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .cryptoGetInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .cryptoGetInfo(v)
        }
      }()
      case 10: try {
        var v: Proto_CryptoGetLiveHashResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .cryptoGetLiveHash(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .cryptoGetLiveHash(v)
        }
      }()
      case 11: try {
        var v: Proto_CryptoGetStakersResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .cryptoGetProxyStakers(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .cryptoGetProxyStakers(v)
        }
      }()
      case 12: try {
        var v: Proto_FileGetContentsResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .fileGetContents(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .fileGetContents(v)
        }
      }()
      case 13: try {
        var v: Proto_FileGetInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .fileGetInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .fileGetInfo(v)
        }
      }()
      case 14: try {
        var v: Proto_TransactionGetReceiptResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .transactionGetReceipt(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .transactionGetReceipt(v)
        }
      }()
      case 15: try {
        var v: Proto_TransactionGetRecordResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .transactionGetRecord(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .transactionGetRecord(v)
        }
      }()
      case 16: try {
        var v: Proto_TransactionGetFastRecordResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .transactionGetFastRecord(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .transactionGetFastRecord(v)
        }
      }()
      case 150: try {
        var v: Proto_ConsensusGetTopicInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .consensusGetTopicInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .consensusGetTopicInfo(v)
        }
      }()
      case 151: try {
        var v: Proto_NetworkGetVersionInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .networkGetVersionInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .networkGetVersionInfo(v)
        }
      }()
      case 152: try {
        var v: Proto_TokenGetInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .tokenGetInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .tokenGetInfo(v)
        }
      }()
      case 153: try {
        var v: Proto_ScheduleGetInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .scheduleGetInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .scheduleGetInfo(v)
        }
      }()
      case 154: try {
        var v: Proto_TokenGetAccountNftInfosResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .tokenGetAccountNftInfos(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .tokenGetAccountNftInfos(v)
        }
      }()
      case 155: try {
        var v: Proto_TokenGetNftInfoResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .tokenGetNftInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .tokenGetNftInfo(v)
        }
      }()
      case 156: try {
        var v: Proto_TokenGetNftInfosResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .tokenGetNftInfos(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .tokenGetNftInfos(v)
        }
      }()
      case 157: try {
        var v: Proto_NetworkGetExecutionTimeResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .networkGetExecutionTime(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .networkGetExecutionTime(v)
        }
      }()
      case 158: try {
        var v: Proto_GetAccountDetailsResponse?
        var hadOneofValue = false
        if let current = self.response {
          hadOneofValue = true
          if case .accountDetails(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.response = .accountDetails(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.response {
    case .getByKey?: try {
      guard case .getByKey(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .getBySolidityID?: try {
      guard case .getBySolidityID(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .contractCallLocal?: try {
      guard case .contractCallLocal(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .contractGetInfo?: try {
      guard case .contractGetInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .contractGetBytecodeResponse?: try {
      guard case .contractGetBytecodeResponse(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .contractGetRecordsResponse?: try {
      guard case .contractGetRecordsResponse(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .cryptogetAccountBalance?: try {
      guard case .cryptogetAccountBalance(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .cryptoGetAccountRecords?: try {
      guard case .cryptoGetAccountRecords(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .cryptoGetInfo?: try {
      guard case .cryptoGetInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .cryptoGetLiveHash?: try {
      guard case .cryptoGetLiveHash(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .cryptoGetProxyStakers?: try {
      guard case .cryptoGetProxyStakers(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .fileGetContents?: try {
      guard case .fileGetContents(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .fileGetInfo?: try {
      guard case .fileGetInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .transactionGetReceipt?: try {
      guard case .transactionGetReceipt(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .transactionGetRecord?: try {
      guard case .transactionGetRecord(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .transactionGetFastRecord?: try {
      guard case .transactionGetFastRecord(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .consensusGetTopicInfo?: try {
      guard case .consensusGetTopicInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 150)
    }()
    case .networkGetVersionInfo?: try {
      guard case .networkGetVersionInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 151)
    }()
    case .tokenGetInfo?: try {
      guard case .tokenGetInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 152)
    }()
    case .scheduleGetInfo?: try {
      guard case .scheduleGetInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 153)
    }()
    case .tokenGetAccountNftInfos?: try {
      guard case .tokenGetAccountNftInfos(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 154)
    }()
    case .tokenGetNftInfo?: try {
      guard case .tokenGetNftInfo(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 155)
    }()
    case .tokenGetNftInfos?: try {
      guard case .tokenGetNftInfos(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 156)
    }()
    case .networkGetExecutionTime?: try {
      guard case .networkGetExecutionTime(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 157)
    }()
    case .accountDetails?: try {
      guard case .accountDetails(let v)? = self.response else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 158)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Response, rhs: Proto_Response) -> Bool {
    if lhs.response != rhs.response {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
