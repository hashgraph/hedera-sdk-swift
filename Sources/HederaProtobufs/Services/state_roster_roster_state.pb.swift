// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: state/roster/roster_state.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// The current state of platform rosters.<br/>
/// This message stores a roster data for the platform in network state.
///
/// The roster state SHALL encapsulate the incoming candidate roster's hash,
/// and a list of pairs of round number and active roster hash.<br/>
/// This data SHALL be used to track round numbers and the rosters used in determining the consensus.<br/>
public struct Com_Hedera_Hapi_Node_State_Roster_RosterState: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The SHA-384 hash of a candidate roster.
  /// <p>
  /// This is the hash of the roster that is currently being considered
  /// for adoption.<br/>
  /// A Node SHALL NOT, ever, have more than one candidate roster
  /// at the same time.
  public var candidateRosterHash: Data = Data()

  ///*
  /// A list of round numbers and roster hashes.<br/>
  /// The round number indicates the round in which the corresponding roster became active
  /// <p>
  /// This list SHALL be ordered by round numbers in descending order.
  public var roundRosterPairs: [Com_Hedera_Hapi_Node_State_Roster_RoundRosterPair] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///*
/// A pair of round number and active roster hash.
/// <p>
/// This message SHALL encapsulate the round number and the hash of the
/// active roster used for that round.
public struct Com_Hedera_Hapi_Node_State_Roster_RoundRosterPair: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The round number.
  /// <p>
  /// This value SHALL be the round number of the consensus round in which this roster became active.
  public var roundNumber: UInt64 = 0

  ///*
  /// The SHA-384 hash of the active roster for the given round number.
  /// <p>
  /// This value SHALL be the hash of the active roster used for the round.
  public var activeRosterHash: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.hedera.hapi.node.state.roster"

extension Com_Hedera_Hapi_Node_State_Roster_RosterState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RosterState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "candidate_roster_hash"),
    2: .standard(proto: "round_roster_pairs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.candidateRosterHash) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.roundRosterPairs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.candidateRosterHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.candidateRosterHash, fieldNumber: 1)
    }
    if !self.roundRosterPairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.roundRosterPairs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Roster_RosterState, rhs: Com_Hedera_Hapi_Node_State_Roster_RosterState) -> Bool {
    if lhs.candidateRosterHash != rhs.candidateRosterHash {return false}
    if lhs.roundRosterPairs != rhs.roundRosterPairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Hedera_Hapi_Node_State_Roster_RoundRosterPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RoundRosterPair"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "round_number"),
    2: .standard(proto: "active_roster_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.roundNumber) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.activeRosterHash) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.roundNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.roundNumber, fieldNumber: 1)
    }
    if !self.activeRosterHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.activeRosterHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Node_State_Roster_RoundRosterPair, rhs: Com_Hedera_Hapi_Node_State_Roster_RoundRosterPair) -> Bool {
    if lhs.roundNumber != rhs.roundNumber {return false}
    if lhs.activeRosterHash != rhs.activeRosterHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
