// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tss_vote.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

///*
/// # Tss Vote Transaction
///
/// ### Keywords
/// The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
/// "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
/// document are to be interpreted as described in
/// [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
/// [RFC8174](https://www.ietf.org/rfc/rfc8174).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///*
/// A transaction body to vote on the validity of Threshold Signature Scheme
/// (TSS) Messages for a candidate roster.
///
/// - A `TssVoteTransactionBody` MUST identify the hash of the roster containing
///   the node generating this TssVote
/// - A `TssVoteTransactionBody` MUST identify the hash of the roster that the
///   TSS messages is for
///  - If the candidate roster has received enough yes votes, the candidate
///    roster SHALL be adopted.
///  - Switching to the candidate roster MUST not happen until enough nodes have
///    voted that they have verified a threshold number of TSS messages from the
///    active roster.
///  - A vote consists of a bit vector of message statuses where each bit
///    corresponds to the order of TssMessages as they have come through
///    consensus.
///  - The threshold for votes to adopt a candidate roster SHALL be at least 1/3
///    of the consensus weight of the active roster to ensure that at least 1
///    honest node has validated the TSS key material.
public struct Com_Hedera_Hapi_Services_Auxiliary_Tss_TssVoteTransactionBody: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A hash of the roster containing the node generating this TssVote.
  public var sourceRosterHash: Data = Data()

  ///*
  /// A hash of the roster that this TssVote is for.
  public var targetRosterHash: Data = Data()

  ///*
  /// An identifier (and public key) computed from the TssMessages for the target
  /// roster.
  public var ledgerID: Data = Data()

  ///*
  /// A signature produced by the node.
  /// <p>
  /// This signature SHALL be produced using the node RSA signing key to sign
  /// the ledger_id.<br/>
  /// This signature SHALL be used to establish a chain of trust in the ledger id.
  public var nodeSignature: Data = Data()

  ///*
  /// A bit vector of message statuses.
  /// <p>
  /// #### Example
  /// <ul><li>The least significant bit of byte[0] SHALL be the 0th item in the sequence.</li>
  ///     <li>The most significant bit of byte[0] SHALL be the 7th item in the sequence.</li>
  ///     <li>The least significant bit of byte[1] SHALL be the 8th item in the sequence.</li>
  ///     <li>The most significant bit of byte[1] SHALL be the 15th item in the sequence.</li>
  /// </ul>
  /// A bit SHALL be set if the `TssMessage` for the `TssMessageTransaction`
  /// with a sequence number matching that bit index has been
  /// received, and is valid.<br/>
  /// A bit SHALL NOT be set if the `TssMessage` has not been received or was
  /// received but not valid.
  public var tssVote: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.hedera.hapi.services.auxiliary.tss"

extension Com_Hedera_Hapi_Services_Auxiliary_Tss_TssVoteTransactionBody: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TssVoteTransactionBody"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_roster_hash"),
    2: .standard(proto: "target_roster_hash"),
    3: .standard(proto: "ledger_id"),
    4: .standard(proto: "node_signature"),
    5: .standard(proto: "tss_vote"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.sourceRosterHash) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.targetRosterHash) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.ledgerID) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.nodeSignature) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.tssVote) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceRosterHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.sourceRosterHash, fieldNumber: 1)
    }
    if !self.targetRosterHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.targetRosterHash, fieldNumber: 2)
    }
    if !self.ledgerID.isEmpty {
      try visitor.visitSingularBytesField(value: self.ledgerID, fieldNumber: 3)
    }
    if !self.nodeSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodeSignature, fieldNumber: 4)
    }
    if !self.tssVote.isEmpty {
      try visitor.visitSingularBytesField(value: self.tssVote, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Hapi_Services_Auxiliary_Tss_TssVoteTransactionBody, rhs: Com_Hedera_Hapi_Services_Auxiliary_Tss_TssVoteTransactionBody) -> Bool {
    if lhs.sourceRosterHash != rhs.sourceRosterHash {return false}
    if lhs.targetRosterHash != rhs.targetRosterHash {return false}
    if lhs.ledgerID != rhs.ledgerID {return false}
    if lhs.nodeSignature != rhs.nodeSignature {return false}
    if lhs.tssVote != rhs.tssVote {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
