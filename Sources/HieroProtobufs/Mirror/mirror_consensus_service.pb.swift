// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: consensus_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//-
// ‌
// Hedera Mirror Node
// ​
// Copyright (C) 2019 Hedera Hashgraph, LLC
// ​
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ‍

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// A required topic ID to retrieve messages for.
  public var topicID: Proto_TopicID {
    get {return _topicID ?? Proto_TopicID()}
    set {_topicID = newValue}
  }
  /// Returns true if `topicID` has been explicitly set.
  public var hasTopicID: Bool {return self._topicID != nil}
  /// Clears the value of `topicID`. Subsequent reads from it will return its default value.
  public mutating func clearTopicID() {self._topicID = nil}

  ///*
  /// Include messages which reached consensus on or after this time. Defaults to current time if
  /// not set.
  public var consensusStartTime: Proto_Timestamp {
    get {return _consensusStartTime ?? Proto_Timestamp()}
    set {_consensusStartTime = newValue}
  }
  /// Returns true if `consensusStartTime` has been explicitly set.
  public var hasConsensusStartTime: Bool {return self._consensusStartTime != nil}
  /// Clears the value of `consensusStartTime`. Subsequent reads from it will return its default value.
  public mutating func clearConsensusStartTime() {self._consensusStartTime = nil}

  ///*
  /// Include messages which reached consensus before this time. If not set it will receive
  /// indefinitely.
  public var consensusEndTime: Proto_Timestamp {
    get {return _consensusEndTime ?? Proto_Timestamp()}
    set {_consensusEndTime = newValue}
  }
  /// Returns true if `consensusEndTime` has been explicitly set.
  public var hasConsensusEndTime: Bool {return self._consensusEndTime != nil}
  /// Clears the value of `consensusEndTime`. Subsequent reads from it will return its default value.
  public mutating func clearConsensusEndTime() {self._consensusEndTime = nil}

  ///*
  /// The maximum number of messages to receive before stopping. If not set or set to zero it will
  /// return messages indefinitely.
  public var limit: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _topicID: Proto_TopicID? = nil
  fileprivate var _consensusStartTime: Proto_Timestamp? = nil
  fileprivate var _consensusEndTime: Proto_Timestamp? = nil
}

public struct Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  /// The time at which the transaction reached consensus
  public var consensusTimestamp: Proto_Timestamp {
    get {return _consensusTimestamp ?? Proto_Timestamp()}
    set {_consensusTimestamp = newValue}
  }
  /// Returns true if `consensusTimestamp` has been explicitly set.
  public var hasConsensusTimestamp: Bool {return self._consensusTimestamp != nil}
  /// Clears the value of `consensusTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearConsensusTimestamp() {self._consensusTimestamp = nil}

  ///*
  /// The message body originally in the ConsensusSubmitMessageTransactionBody. Message size will
  /// be less than 6KiB.
  public var message: Data = Data()

  ///*
  /// The running hash (SHA384) of every message.
  public var runningHash: Data = Data()

  ///*
  /// Starts at 1 for first submitted message. Incremented on each submitted message.
  public var sequenceNumber: UInt64 = 0

  ///*
  /// Version of the SHA-384 digest used to update the running hash.
  public var runningHashVersion: UInt64 = 0

  ///*
  /// Optional information of the current chunk in a fragmented message.
  public var chunkInfo: Proto_ConsensusMessageChunkInfo {
    get {return _chunkInfo ?? Proto_ConsensusMessageChunkInfo()}
    set {_chunkInfo = newValue}
  }
  /// Returns true if `chunkInfo` has been explicitly set.
  public var hasChunkInfo: Bool {return self._chunkInfo != nil}
  /// Clears the value of `chunkInfo`. Subsequent reads from it will return its default value.
  public mutating func clearChunkInfo() {self._chunkInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _consensusTimestamp: Proto_Timestamp? = nil
  fileprivate var _chunkInfo: Proto_ConsensusMessageChunkInfo? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery: @unchecked Sendable {}
extension Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.hedera.mirror.api.proto"

extension Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConsensusTopicQuery"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topicID"),
    2: .same(proto: "consensusStartTime"),
    3: .same(proto: "consensusEndTime"),
    4: .same(proto: "limit"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._topicID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._consensusStartTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._consensusEndTime) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.limit) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._topicID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._consensusStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._consensusEndTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.limit != 0 {
      try visitor.visitSingularUInt64Field(value: self.limit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery, rhs: Com_Hedera_Mirror_Api_Proto_ConsensusTopicQuery) -> Bool {
    if lhs._topicID != rhs._topicID {return false}
    if lhs._consensusStartTime != rhs._consensusStartTime {return false}
    if lhs._consensusEndTime != rhs._consensusEndTime {return false}
    if lhs.limit != rhs.limit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConsensusTopicResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "consensusTimestamp"),
    2: .same(proto: "message"),
    3: .same(proto: "runningHash"),
    4: .same(proto: "sequenceNumber"),
    5: .same(proto: "runningHashVersion"),
    6: .same(proto: "chunkInfo"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._consensusTimestamp) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.runningHash) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.sequenceNumber) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.runningHashVersion) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._chunkInfo) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._consensusTimestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.message.isEmpty {
      try visitor.visitSingularBytesField(value: self.message, fieldNumber: 2)
    }
    if !self.runningHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.runningHash, fieldNumber: 3)
    }
    if self.sequenceNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequenceNumber, fieldNumber: 4)
    }
    if self.runningHashVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.runningHashVersion, fieldNumber: 5)
    }
    try { if let v = self._chunkInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse, rhs: Com_Hedera_Mirror_Api_Proto_ConsensusTopicResponse) -> Bool {
    if lhs._consensusTimestamp != rhs._consensusTimestamp {return false}
    if lhs.message != rhs.message {return false}
    if lhs.runningHash != rhs.runningHash {return false}
    if lhs.sequenceNumber != rhs.sequenceNumber {return false}
    if lhs.runningHashVersion != rhs.runningHashVersion {return false}
    if lhs._chunkInfo != rhs._chunkInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
