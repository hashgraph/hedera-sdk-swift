//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: SmartContractService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Proto_SmartContractServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Proto_SmartContractServiceService {
  func createContract(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func updateContract(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func contractCallMethod(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func getContractInfo(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func contractCallLocalMethod(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func contractGetBytecode(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getBySolidityID(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getTxRecordByContractID(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func deleteContract(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func systemDelete(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func systemUndelete(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

internal final class Proto_SmartContractServiceServiceClient: GRPCServiceClient, Proto_SmartContractServiceService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "proto.SmartContractService" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the proto.SmartContractService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to createContract.
  ///
  /// - Parameters:
  ///   - request: Request to send to createContract.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createContract(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "createContract"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to updateContract.
  ///
  /// - Parameters:
  ///   - request: Request to send to updateContract.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateContract(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "updateContract"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to contractCallMethod.
  ///
  /// - Parameters:
  ///   - request: Request to send to contractCallMethod.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractCallMethod(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "contractCallMethod"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getContractInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to getContractInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getContractInfo(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getContractInfo"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to contractCallLocalMethod.
  ///
  /// - Parameters:
  ///   - request: Request to send to contractCallLocalMethod.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractCallLocalMethod(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "contractCallLocalMethod"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ContractGetBytecode.
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractGetBytecode.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractGetBytecode(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "ContractGetBytecode"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getBySolidityID.
  ///
  /// - Parameters:
  ///   - request: Request to send to getBySolidityID.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBySolidityID(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getBySolidityID"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getTxRecordByContractID.
  ///
  /// - Parameters:
  ///   - request: Request to send to getTxRecordByContractID.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTxRecordByContractID(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getTxRecordByContractID"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to deleteContract.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteContract.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteContract(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "deleteContract"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to systemDelete.
  ///
  /// - Parameters:
  ///   - request: Request to send to systemDelete.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func systemDelete(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "systemDelete"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to systemUndelete.
  ///
  /// - Parameters:
  ///   - request: Request to send to systemUndelete.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func systemUndelete(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "systemUndelete"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Proto_SmartContractServiceProvider: CallHandlerProvider {
  func createContract(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func updateContract(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func contractCallMethod(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func getContractInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func contractCallLocalMethod(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func contractGetBytecode(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getBySolidityID(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getTxRecordByContractID(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func deleteContract(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func systemDelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func systemUndelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
}

extension Proto_SmartContractServiceProvider {
  internal var serviceName: String { return "proto.SmartContractService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "createContract":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createContract(request: request, context: context)
        }
      }

    case "updateContract":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateContract(request: request, context: context)
        }
      }

    case "contractCallMethod":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.contractCallMethod(request: request, context: context)
        }
      }

    case "getContractInfo":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getContractInfo(request: request, context: context)
        }
      }

    case "contractCallLocalMethod":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.contractCallLocalMethod(request: request, context: context)
        }
      }

    case "ContractGetBytecode":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.contractGetBytecode(request: request, context: context)
        }
      }

    case "getBySolidityID":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getBySolidityID(request: request, context: context)
        }
      }

    case "getTxRecordByContractID":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTxRecordByContractID(request: request, context: context)
        }
      }

    case "deleteContract":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteContract(request: request, context: context)
        }
      }

    case "systemDelete":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.systemDelete(request: request, context: context)
        }
      }

    case "systemUndelete":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.systemUndelete(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

