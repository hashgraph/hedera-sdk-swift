//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: FileService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Proto_FileServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Proto_FileServiceService {
  func createFile(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func updateFile(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func deleteFile(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func appendContent(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func getFileContent(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getFileInfo(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func systemDelete(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func systemUndelete(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
}

internal final class Proto_FileServiceServiceClient: GRPCServiceClient, Proto_FileServiceService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "proto.FileService" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the proto.FileService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to createFile.
  ///
  /// - Parameters:
  ///   - request: Request to send to createFile.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFile(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "createFile"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to updateFile.
  ///
  /// - Parameters:
  ///   - request: Request to send to updateFile.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateFile(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "updateFile"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to deleteFile.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteFile.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteFile(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "deleteFile"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to appendContent.
  ///
  /// - Parameters:
  ///   - request: Request to send to appendContent.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func appendContent(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "appendContent"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getFileContent.
  ///
  /// - Parameters:
  ///   - request: Request to send to getFileContent.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFileContent(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getFileContent"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getFileInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to getFileInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFileInfo(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getFileInfo"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to systemDelete.
  ///
  /// - Parameters:
  ///   - request: Request to send to systemDelete.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func systemDelete(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "systemDelete"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to systemUndelete.
  ///
  /// - Parameters:
  ///   - request: Request to send to systemUndelete.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func systemUndelete(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "systemUndelete"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Proto_FileServiceProvider: CallHandlerProvider {
  func createFile(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func updateFile(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func deleteFile(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func appendContent(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func getFileContent(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getFileInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func systemDelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func systemUndelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
}

extension Proto_FileServiceProvider {
  internal var serviceName: String { return "proto.FileService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "createFile":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createFile(request: request, context: context)
        }
      }

    case "updateFile":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateFile(request: request, context: context)
        }
      }

    case "deleteFile":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteFile(request: request, context: context)
        }
      }

    case "appendContent":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.appendContent(request: request, context: context)
        }
      }

    case "getFileContent":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFileContent(request: request, context: context)
        }
      }

    case "getFileInfo":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFileInfo(request: request, context: context)
        }
      }

    case "systemDelete":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.systemDelete(request: request, context: context)
        }
      }

    case "systemUndelete":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.systemUndelete(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

