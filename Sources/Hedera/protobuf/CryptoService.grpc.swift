//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: CryptoService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Proto_CryptoServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Proto_CryptoServiceService {
  func createAccount(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func updateAccount(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func cryptoTransfer(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func cryptoDelete(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func addClaim(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func deleteClaim(_ request: Proto_Transaction, callOptions: CallOptions?) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse>
  func getClaim(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getAccountRecords(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func cryptoGetBalance(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getAccountInfo(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getTransactionReceipts(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getFastTransactionRecord(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getTxRecordByTxID(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
  func getStakersByAccountID(_ request: Proto_Query, callOptions: CallOptions?) -> UnaryCall<Proto_Query, Proto_Response>
}

internal final class Proto_CryptoServiceServiceClient: GRPCServiceClient, Proto_CryptoServiceService {
  internal let connection: ClientConnection
  internal var serviceName: String { return "proto.CryptoService" }
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the proto.CryptoService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to createAccount.
  ///
  /// - Parameters:
  ///   - request: Request to send to createAccount.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAccount(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "createAccount"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to updateAccount.
  ///
  /// - Parameters:
  ///   - request: Request to send to updateAccount.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAccount(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "updateAccount"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to cryptoTransfer.
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoTransfer.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cryptoTransfer(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "cryptoTransfer"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to cryptoDelete.
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoDelete.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cryptoDelete(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "cryptoDelete"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to addClaim.
  ///
  /// - Parameters:
  ///   - request: Request to send to addClaim.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addClaim(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "addClaim"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to deleteClaim.
  ///
  /// - Parameters:
  ///   - request: Request to send to deleteClaim.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteClaim(_ request: Proto_Transaction, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Transaction, Proto_TransactionResponse> {
    return self.makeUnaryCall(path: self.path(forMethod: "deleteClaim"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getClaim.
  ///
  /// - Parameters:
  ///   - request: Request to send to getClaim.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getClaim(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getClaim"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getAccountRecords.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountRecords.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountRecords(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getAccountRecords"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to cryptoGetBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to cryptoGetBalance.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cryptoGetBalance(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "cryptoGetBalance"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getAccountInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to getAccountInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAccountInfo(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getAccountInfo"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getTransactionReceipts.
  ///
  /// - Parameters:
  ///   - request: Request to send to getTransactionReceipts.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTransactionReceipts(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getTransactionReceipts"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getFastTransactionRecord.
  ///
  /// - Parameters:
  ///   - request: Request to send to getFastTransactionRecord.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFastTransactionRecord(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getFastTransactionRecord"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getTxRecordByTxID.
  ///
  /// - Parameters:
  ///   - request: Request to send to getTxRecordByTxID.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTxRecordByTxID(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getTxRecordByTxID"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to getStakersByAccountID.
  ///
  /// - Parameters:
  ///   - request: Request to send to getStakersByAccountID.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getStakersByAccountID(_ request: Proto_Query, callOptions: CallOptions? = nil) -> UnaryCall<Proto_Query, Proto_Response> {
    return self.makeUnaryCall(path: self.path(forMethod: "getStakersByAccountID"),
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Proto_CryptoServiceProvider: CallHandlerProvider {
  func createAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func updateAccount(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func cryptoTransfer(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func cryptoDelete(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func addClaim(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func deleteClaim(request: Proto_Transaction, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_TransactionResponse>
  func getClaim(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getAccountRecords(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func cryptoGetBalance(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getAccountInfo(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getTransactionReceipts(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getFastTransactionRecord(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getTxRecordByTxID(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
  func getStakersByAccountID(request: Proto_Query, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Response>
}

extension Proto_CryptoServiceProvider {
  internal var serviceName: String { return "proto.CryptoService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "createAccount":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.createAccount(request: request, context: context)
        }
      }

    case "updateAccount":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateAccount(request: request, context: context)
        }
      }

    case "cryptoTransfer":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cryptoTransfer(request: request, context: context)
        }
      }

    case "cryptoDelete":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cryptoDelete(request: request, context: context)
        }
      }

    case "addClaim":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addClaim(request: request, context: context)
        }
      }

    case "deleteClaim":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteClaim(request: request, context: context)
        }
      }

    case "getClaim":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getClaim(request: request, context: context)
        }
      }

    case "getAccountRecords":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAccountRecords(request: request, context: context)
        }
      }

    case "cryptoGetBalance":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cryptoGetBalance(request: request, context: context)
        }
      }

    case "getAccountInfo":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getAccountInfo(request: request, context: context)
        }
      }

    case "getTransactionReceipts":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTransactionReceipts(request: request, context: context)
        }
      }

    case "getFastTransactionRecord":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getFastTransactionRecord(request: request, context: context)
        }
      }

    case "getTxRecordByTxID":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTxRecordByTxID(request: request, context: context)
        }
      }

    case "getStakersByAccountID":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getStakersByAccountID(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

